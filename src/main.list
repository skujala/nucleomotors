
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 b1 0c 00 08 ad 0c 00 08 ab 0c 00 08     ... ............
 8000010:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 00 00 00 00     ................
	...
 800002c:	ad 0c 00 08 ad 0c 00 08 00 00 00 00 ad 0c 00 08     ................
 800003c:	ad 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800004c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800005c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800006c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800007c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800008c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800009c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000ac:	ab 0c 00 08 ad 01 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000bc:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000cc:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000dc:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000ec:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 80000fc:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800010c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800011c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800012c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800013c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800014c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800015c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800016c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800017c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800018c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................
 800019c:	ab 0c 00 08 ab 0c 00 08 ab 0c 00 08 ab 0c 00 08     ................

080001ac <tim2_isr>:
  timer_enable_irq(TIM2, TIM_DIER_CC2IE);
  timer_generate_event(TIM2, TIM_EGR_UG);
}

void tim2_isr(void)
{  
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t next_period; 
  
  if (timer_get_flag(TIM2, TIM_SR_CC2IF)) {
 80001b0:	2104      	movs	r1, #4
 80001b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001b6:	f000 fbad 	bl	8000914 <timer_get_flag>
 80001ba:	2800      	cmp	r0, #0
 80001bc:	d04c      	beq.n	8000258 <tim2_isr+0xac>
    timer_clear_flag(TIM2, TIM_SR_CC2IF);
 80001be:	2104      	movs	r1, #4
 80001c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c4:	f000 fbac 	bl	8000920 <timer_clear_flag>
        
    last_period = TIM2_ARR;
 80001c8:	4b24      	ldr	r3, [pc, #144]	; (800025c <tim2_isr+0xb0>)
 80001ca:	4d25      	ldr	r5, [pc, #148]	; (8000260 <tim2_isr+0xb4>)
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b25      	ldr	r3, [pc, #148]	; (8000264 <tim2_isr+0xb8>)
 80001d0:	601a      	str	r2, [r3, #0]
    
    if (last_period > m1_target_period) {
 80001d2:	4a25      	ldr	r2, [pc, #148]	; (8000268 <tim2_isr+0xbc>)
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	6812      	ldr	r2, [r2, #0]
 80001d8:	4291      	cmp	r1, r2
 80001da:	d931      	bls.n	8000240 <tim2_isr+0x94>
      next_period = last_period - (uint64_t)2*last_period / (4*step_count + 1.);
 80001dc:	6818      	ldr	r0, [r3, #0]
 80001de:	681c      	ldr	r4, [r3, #0]
 80001e0:	f8d5 a000 	ldr.w	sl, [r5]
 80001e4:	f000 ff00 	bl	8000fe8 <__aeabi_ui2d>
 80001e8:	4606      	mov	r6, r0
 80001ea:	460f      	mov	r7, r1
 80001ec:	1920      	adds	r0, r4, r4
 80001ee:	f04f 0100 	mov.w	r1, #0
 80001f2:	4149      	adcs	r1, r1
 80001f4:	f000 ff38 	bl	8001068 <__aeabi_ul2d>
 80001f8:	4680      	mov	r8, r0
 80001fa:	ea4f 008a 	mov.w	r0, sl, lsl #2
 80001fe:	4689      	mov	r9, r1
 8000200:	f000 fef2 	bl	8000fe8 <__aeabi_ui2d>
 8000204:	2200      	movs	r2, #0
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <tim2_isr+0xc0>)
 8000208:	f000 fdb2 	bl	8000d70 <__adddf3>
 800020c:	4602      	mov	r2, r0
 800020e:	460b      	mov	r3, r1
 8000210:	4640      	mov	r0, r8
 8000212:	4649      	mov	r1, r9
 8000214:	f001 f888 	bl	8001328 <__aeabi_ddiv>
 8000218:	4602      	mov	r2, r0
 800021a:	460b      	mov	r3, r1
 800021c:	4630      	mov	r0, r6
 800021e:	4639      	mov	r1, r7
 8000220:	f000 fda4 	bl	8000d6c <__aeabi_dsub>
 8000224:	f001 f968 	bl	80014f8 <__aeabi_d2uiz>
            
      timer_set_period(TIM2, next_period);
 8000228:	4601      	mov	r1, r0
    timer_clear_flag(TIM2, TIM_SR_CC2IF);
        
    last_period = TIM2_ARR;
    
    if (last_period > m1_target_period) {
      next_period = last_period - (uint64_t)2*last_period / (4*step_count + 1.);
 800022a:	4604      	mov	r4, r0
            
      timer_set_period(TIM2, next_period);
 800022c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000230:	f000 fb98 	bl	8000964 <timer_set_period>
      timer_set_oc_value(TIM2, TIM_OC2, next_period >> 1);
 8000234:	0862      	lsrs	r2, r4, #1
 8000236:	2102      	movs	r1, #2
 8000238:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800023c:	f000 fcb6 	bl	8000bac <timer_set_oc_value>
    }
    
    
    if (step_count++ > 0x20000) {
 8000240:	682b      	ldr	r3, [r5, #0]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000248:	602a      	str	r2, [r5, #0]
 800024a:	d905      	bls.n	8000258 <tim2_isr+0xac>
      timer_disable_counter(TIM2);
 800024c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    };
    
  }
}
 8000250:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      timer_set_oc_value(TIM2, TIM_OC2, next_period >> 1);
    }
    
    
    if (step_count++ > 0x20000) {
      timer_disable_counter(TIM2);
 8000254:	f000 bb7f 	b.w	8000956 <timer_disable_counter>
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	4000002c 	.word	0x4000002c
 8000260:	2000000c 	.word	0x2000000c
 8000264:	20000014 	.word	0x20000014
 8000268:	20000010 	.word	0x20000010
 800026c:	3ff00000 	.word	0x3ff00000

08000270 <main>:
}



int main(void)
{
 8000270:	b508      	push	{r3, lr}
static void rcc_clock_setup(void)
{
  /* Modified from libopencm3 library function rcc_clock_setup_hse_3v3. Could be refactored. */
  
  /* Enable internal high-period oscillator. */
  rcc_osc_on(RCC_HSI);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f9fa 	bl	800066c <rcc_osc_on>
  rcc_wait_for_osc_ready(RCC_HSI);
 8000278:	2002      	movs	r0, #2
 800027a:	f000 f9b5 	bl	80005e8 <rcc_wait_for_osc_ready>
  
  /* Select HSI as SYSCLK source. */
  rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 800027e:	2000      	movs	r0, #0
 8000280:	f000 fa38 	bl	80006f4 <rcc_set_sysclk_source>
  
  /* Enable external high-period oscillator 8MHz. */
  rcc_osc_on(RCC_HSE);
 8000284:	2001      	movs	r0, #1
 8000286:	f000 f9f1 	bl	800066c <rcc_osc_on>
  rcc_wait_for_osc_ready(RCC_HSE);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 f9ac 	bl	80005e8 <rcc_wait_for_osc_ready>
  
  /* Enable high performance mode */
  pwr_set_vos_scale(PWR_SCALE1);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f999 	bl	80005c8 <pwr_set_vos_scale>
  
  /*
   * Set prescalers for AHB, ADC, ABP1, ABP2.
   * Do this before touching the PLL (TODO: why?).
   */
  rcc_set_hpre(RCC_CFGR_HPRE_DIV_NONE);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fa4a 	bl	8000730 <rcc_set_hpre>
  rcc_set_ppre1(RCC_CFGR_PPRE_DIV_2);
 800029c:	2004      	movs	r0, #4
 800029e:	f000 fa3d 	bl	800071c <rcc_set_ppre1>
  rcc_set_ppre2(RCC_CFGR_PPRE_DIV_NONE);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fa30 	bl	8000708 <rcc_set_ppre2>
  
  rcc_set_main_pll_hse(
 80002a8:	2302      	movs	r3, #2
 80002aa:	2204      	movs	r2, #4
 80002ac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80002b0:	2008      	movs	r0, #8
 80002b2:	f000 fa47 	bl	8000744 <rcc_set_main_pll_hse>
      4, /* PLL_P */ 
      2  /* PLL_Q */
  );
  
  /* Enable PLL oscillator and wait for it to stabilize. */
  rcc_osc_on(RCC_PLL);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 f9d8 	bl	800066c <rcc_osc_on>
  rcc_wait_for_osc_ready(RCC_PLL);
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 f993 	bl	80005e8 <rcc_wait_for_osc_ready>
  
  /* Configure flash settings. */
  flash_set_ws(FLASH_ACR_ICE | FLASH_ACR_DCE | FLASH_ACR_LATENCY_3WS);
 80002c2:	f240 6003 	movw	r0, #1539	; 0x603
 80002c6:	f000 fcc5 	bl	8000c54 <flash_set_ws>
  
  /* Select PLL as SYSCLK source. */
  rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 80002ca:	2002      	movs	r0, #2
 80002cc:	f000 fa12 	bl	80006f4 <rcc_set_sysclk_source>
  
  /* Wait for PLL clock to be selected. */
  rcc_wait_for_sysclk_status(RCC_PLL);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 f9af 	bl	8000634 <rcc_wait_for_sysclk_status>
  
  /* Set the peripheral clock frequencies used. */
  rcc_ahb_frequency  = 96000000;
 80002d6:	4aae      	ldr	r2, [pc, #696]	; (8000590 <main+0x320>)
 80002d8:	4bae      	ldr	r3, [pc, #696]	; (8000594 <main+0x324>)
 80002da:	6013      	str	r3, [r2, #0]
  rcc_apb1_frequency = 48000000;
 80002dc:	4aae      	ldr	r2, [pc, #696]	; (8000598 <main+0x328>)
 80002de:	49af      	ldr	r1, [pc, #700]	; (800059c <main+0x32c>)
 80002e0:	6011      	str	r1, [r2, #0]
  rcc_apb2_frequency = 96000000;
 80002e2:	4aaf      	ldr	r2, [pc, #700]	; (80005a0 <main+0x330>)
  
  /* Disable internal high-period oscillator. */
  rcc_osc_off(RCC_HSI);
 80002e4:	2002      	movs	r0, #2
  rcc_wait_for_sysclk_status(RCC_PLL);
  
  /* Set the peripheral clock frequencies used. */
  rcc_ahb_frequency  = 96000000;
  rcc_apb1_frequency = 48000000;
  rcc_apb2_frequency = 96000000;
 80002e6:	6013      	str	r3, [r2, #0]
  
  /* Disable internal high-period oscillator. */
  rcc_osc_off(RCC_HSI);
 80002e8:	f000 f9e2 	bl	80006b0 <rcc_osc_off>
static void rcc_setup(void)
{
  rcc_clock_setup();

  /* Enable GPIOD clock for LED & USARTs. */
  rcc_periph_clock_enable(RCC_GPIOA);
 80002ec:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80002f0:	f000 fcba 	bl	8000c68 <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_GPIOB);
 80002f4:	f240 6001 	movw	r0, #1537	; 0x601
 80002f8:	f000 fcb6 	bl	8000c68 <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_GPIOC);
 80002fc:	f240 6002 	movw	r0, #1538	; 0x602
 8000300:	f000 fcb2 	bl	8000c68 <rcc_periph_clock_enable>

  /* Enable clocks for USART2. */
  rcc_periph_clock_enable(RCC_USART2);
 8000304:	f640 0011 	movw	r0, #2065	; 0x811
 8000308:	f000 fcae 	bl	8000c68 <rcc_periph_clock_enable>

  /* Enable timers for PWM and timing */
  rcc_periph_clock_enable(RCC_TIM2);
 800030c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000310:	f000 fcaa 	bl	8000c68 <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_TIM3);
 8000314:	f640 0001 	movw	r0, #2049	; 0x801
 8000318:	f000 fca6 	bl	8000c68 <rcc_periph_clock_enable>
    
  rcc_periph_clock_enable(RCC_SPI1);
 800031c:	f640 008c 	movw	r0, #2188	; 0x88c
 8000320:	f000 fca2 	bl	8000c68 <rcc_periph_clock_enable>

static volatile uint32_t system_millis;

static void nvic_setup(void)
{
  nvic_enable_irq(NVIC_TIM2_IRQ);
 8000324:	201c      	movs	r0, #28
 8000326:	f000 fd0f 	bl	8000d48 <nvic_enable_irq>
}

static void gpio_setup(void)
{ 
  /*** L6474 DIRECTION PINS for X-NUCLEO-IHM01A1 ***/
  gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO8);
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	2200      	movs	r2, #0
 8000330:	2101      	movs	r1, #1
 8000332:	489c      	ldr	r0, [pc, #624]	; (80005a4 <main+0x334>)
 8000334:	f000 fa1b 	bl	800076e <gpio_mode_setup>
  gpio_mode_setup(GPIOB, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO5);
 8000338:	2320      	movs	r3, #32
 800033a:	2200      	movs	r2, #0
 800033c:	2101      	movs	r1, #1
 800033e:	489a      	ldr	r0, [pc, #616]	; (80005a8 <main+0x338>)
 8000340:	f000 fa15 	bl	800076e <gpio_mode_setup>
  
  
  /*** L6474 STBY\\RESET pin ***/  
  gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO9);
 8000344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4895      	ldr	r0, [pc, #596]	; (80005a4 <main+0x334>)
 800034e:	f000 fa0e 	bl	800076e <gpio_mode_setup>

  /*** L6474 FLAG OUTPUT pin ***/  
  gpio_mode_setup(GPIOA, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO10);
 8000352:	2200      	movs	r2, #0
 8000354:	4611      	mov	r1, r2
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	4892      	ldr	r0, [pc, #584]	; (80005a4 <main+0x334>)
 800035c:	f000 fa07 	bl	800076e <gpio_mode_setup>


  /*** USART2 ***/

  /* Setup GPIO pins for USART2 transmit. */
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO2|GPIO3);
 8000360:	230c      	movs	r3, #12
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	488f      	ldr	r0, [pc, #572]	; (80005a4 <main+0x334>)
 8000368:	f000 fa01 	bl	800076e <gpio_mode_setup>
  gpio_set_af(GPIOA, GPIO_AF7, GPIO2|GPIO3);
 800036c:	220c      	movs	r2, #12
 800036e:	2107      	movs	r1, #7
 8000370:	488c      	ldr	r0, [pc, #560]	; (80005a4 <main+0x334>)
 8000372:	f000 fa1e 	bl	80007b2 <gpio_set_af>
  

  /*** PWM TIMERS for X-NUCLEO-IHM01A1 PWM1 (PC7/TIM3_CH2) and PWM2 (PB3/TIM2_CH2) ***/

  /* Setup GPIO PB3 (tim2_ch2) and PC7 (tim3_ch2) alternate functions */
  gpio_mode_setup(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO3);
 8000376:	2308      	movs	r3, #8
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	488a      	ldr	r0, [pc, #552]	; (80005a8 <main+0x338>)
 800037e:	f000 f9f6 	bl	800076e <gpio_mode_setup>
  gpio_set_af(GPIOB, GPIO_AF1, GPIO3);
 8000382:	2208      	movs	r2, #8
 8000384:	2101      	movs	r1, #1
 8000386:	4888      	ldr	r0, [pc, #544]	; (80005a8 <main+0x338>)
 8000388:	f000 fa13 	bl	80007b2 <gpio_set_af>
  
  gpio_mode_setup(GPIOC, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO7);
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4886      	ldr	r0, [pc, #536]	; (80005ac <main+0x33c>)
 8000394:	f000 f9eb 	bl	800076e <gpio_mode_setup>
  gpio_set_af(GPIOC, GPIO_AF2, GPIO7);
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	2102      	movs	r1, #2
 800039c:	4883      	ldr	r0, [pc, #524]	; (80005ac <main+0x33c>)
 800039e:	f000 fa08 	bl	80007b2 <gpio_set_af>
    
    
  /*** SPI1 ***/

  /* CS */
  gpio_mode_setup(GPIOB, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO6);
 80003a2:	2340      	movs	r3, #64	; 0x40
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	487f      	ldr	r0, [pc, #508]	; (80005a8 <main+0x338>)
 80003aa:	f000 f9e0 	bl	800076e <gpio_mode_setup>
  
  /* SPI1 @ PA5-PA7 */
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO5 | GPIO6 | GPIO7);
 80003ae:	23e0      	movs	r3, #224	; 0xe0
 80003b0:	2200      	movs	r2, #0
 80003b2:	2102      	movs	r1, #2
 80003b4:	487b      	ldr	r0, [pc, #492]	; (80005a4 <main+0x334>)
 80003b6:	f000 f9da 	bl	800076e <gpio_mode_setup>
  gpio_set_af(GPIOA, GPIO_AF5, GPIO5 | GPIO6 | GPIO7);
 80003ba:	22e0      	movs	r2, #224	; 0xe0
 80003bc:	2105      	movs	r1, #5
 80003be:	4879      	ldr	r0, [pc, #484]	; (80005a4 <main+0x334>)
 80003c0:	f000 f9f7 	bl	80007b2 <gpio_set_af>
}

static void usart_setup(void)
{
  /* Setup USART2 parameters. */
  usart_set_baudrate(USART2, 115200);
 80003c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80003c8:	4879      	ldr	r0, [pc, #484]	; (80005b0 <main+0x340>)
 80003ca:	f000 fc05 	bl	8000bd8 <usart_set_baudrate>
  usart_set_databits(USART2, 8);
 80003ce:	2108      	movs	r1, #8
 80003d0:	4877      	ldr	r0, [pc, #476]	; (80005b0 <main+0x340>)
 80003d2:	f000 fc19 	bl	8000c08 <usart_set_databits>
  usart_set_stopbits(USART2, USART_STOPBITS_1);
 80003d6:	2100      	movs	r1, #0
 80003d8:	4875      	ldr	r0, [pc, #468]	; (80005b0 <main+0x340>)
 80003da:	f000 fc1e 	bl	8000c1a <usart_set_stopbits>
  usart_set_mode(USART2, USART_MODE_TX);
 80003de:	2108      	movs	r1, #8
 80003e0:	4873      	ldr	r0, [pc, #460]	; (80005b0 <main+0x340>)
 80003e2:	f000 fc26 	bl	8000c32 <usart_set_mode>
  usart_set_parity(USART2, USART_PARITY_NONE);
 80003e6:	2100      	movs	r1, #0
 80003e8:	4871      	ldr	r0, [pc, #452]	; (80005b0 <main+0x340>)
 80003ea:	f000 fc1c 	bl	8000c26 <usart_set_parity>
  usart_set_flow_control(USART2, USART_FLOWCONTROL_NONE);
 80003ee:	2100      	movs	r1, #0
 80003f0:	486f      	ldr	r0, [pc, #444]	; (80005b0 <main+0x340>)
 80003f2:	f000 fc24 	bl	8000c3e <usart_set_flow_control>

  /* Finally enable the USART. */
  usart_enable(USART2);
 80003f6:	486e      	ldr	r0, [pc, #440]	; (80005b0 <main+0x340>)
 80003f8:	f000 fc27 	bl	8000c4a <usart_enable>
{
  /* 
    L6474 SPI CLOCK frequency max 5 MHz -> SPI1 runs from APB2 bus (rate 96) MHz -> need to divide by 32,
    resulting in 3 MHz clock frequency. Probably acceptable.
  */
  spi_set_baudrate_prescaler(SPI1, SPI_CR1_BR_FPCLK_DIV_16);
 80003fc:	2103      	movs	r1, #3
 80003fe:	486d      	ldr	r0, [pc, #436]	; (80005b4 <main+0x344>)
 8000400:	f000 fa27 	bl	8000852 <spi_set_baudrate_prescaler>
  spi_set_standard_mode(SPI1, 3);
 8000404:	2103      	movs	r1, #3
 8000406:	486b      	ldr	r0, [pc, #428]	; (80005b4 <main+0x344>)
 8000408:	f000 fa32 	bl	8000870 <spi_set_standard_mode>
  
  spi_set_full_duplex_mode(SPI1);
 800040c:	4869      	ldr	r0, [pc, #420]	; (80005b4 <main+0x344>)
 800040e:	f000 fa08 	bl	8000822 <spi_set_full_duplex_mode>
  spi_set_dff_8bit(SPI1);
 8000412:	4868      	ldr	r0, [pc, #416]	; (80005b4 <main+0x344>)
 8000414:	f000 fa34 	bl	8000880 <spi_set_dff_8bit>
  spi_send_msb_first(SPI1);
 8000418:	4866      	ldr	r0, [pc, #408]	; (80005b4 <main+0x344>)
 800041a:	f000 fa15 	bl	8000848 <spi_send_msb_first>

  spi_enable_software_slave_management(SPI1);
 800041e:	4865      	ldr	r0, [pc, #404]	; (80005b4 <main+0x344>)
 8000420:	f000 fa04 	bl	800082c <spi_enable_software_slave_management>
  spi_set_nss_high(SPI1);
 8000424:	4863      	ldr	r0, [pc, #396]	; (80005b4 <main+0x344>)
 8000426:	f000 fa0a 	bl	800083e <spi_set_nss_high>

  spi_set_master_mode(SPI1);
 800042a:	4862      	ldr	r0, [pc, #392]	; (80005b4 <main+0x344>)
 800042c:	f000 fa1b 	bl	8000866 <spi_set_master_mode>

  spi_enable(SPI1);
 8000430:	4860      	ldr	r0, [pc, #384]	; (80005b4 <main+0x344>)
 8000432:	f000 f9ea 	bl	800080a <spi_enable>
    
  /* Pull cable select UP as no comms will yet happen */    
  gpio_set(GPIOB, GPIO6);
 8000436:	2140      	movs	r1, #64	; 0x40
 8000438:	485b      	ldr	r0, [pc, #364]	; (80005a8 <main+0x338>)
 800043a:	f000 f993 	bl	8000764 <gpio_set>


/* Combining the two functions below would be a useful DRY refactor */
static void tim2_setup(void)
{
  timer_reset(TIM2);
 800043e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000442:	f000 fa23 	bl	800088c <timer_reset>
  timer_set_mode(TIM2, TIM_CR1_CKD_CK_INT,
 8000446:	2300      	movs	r3, #0
 8000448:	461a      	mov	r2, r3
 800044a:	4619      	mov	r1, r3
 800044c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000450:	f000 fa69 	bl	8000926 <timer_set_mode>
                 TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);

  timer_set_prescaler(TIM2, 1);
 8000454:	2101      	movs	r1, #1
 8000456:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800045a:	f000 fa81 	bl	8000960 <timer_set_prescaler>
  timer_enable_preload(TIM2);
 800045e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000462:	f000 fa69 	bl	8000938 <timer_enable_preload>
  
  timer_continuous_mode(TIM2);
 8000466:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800046a:	f000 fa6a 	bl	8000942 <timer_continuous_mode>

  timer_set_period(TIM2, 0x80000);
 800046e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000472:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000476:	f000 fa75 	bl	8000964 <timer_set_period>
  timer_set_oc_mode(TIM2, TIM_OC2, TIM_OCM_PWM1);
 800047a:	2206      	movs	r2, #6
 800047c:	2102      	movs	r1, #2
 800047e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000482:	f000 fa71 	bl	8000968 <timer_set_oc_mode>
  timer_enable_oc_preload(TIM2, TIM_OC2);
 8000486:	2102      	movs	r1, #2
 8000488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800048c:	f000 fb38 	bl	8000b00 <timer_enable_oc_preload>
  timer_enable_oc_output(TIM2, TIM_OC2);
 8000490:	2102      	movs	r1, #2
 8000492:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000496:	f000 fb4d 	bl	8000b34 <timer_enable_oc_output>
  timer_set_oc_value(TIM2, TIM_OC2, 0x80000 >> 1);
 800049a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800049e:	2102      	movs	r1, #2
 80004a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004a4:	f000 fb82 	bl	8000bac <timer_set_oc_value>
    
  timer_set_counter(TIM2, 0x00000000);
 80004a8:	2100      	movs	r1, #0
 80004aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004ae:	f000 fb91 	bl	8000bd4 <timer_set_counter>
    As the preload registers are transferred to the shadow registers only when an update event
    occurs, before starting the counter, you have to initialize all the registers by setting
    the UG bit in the TIMx_EGR register.

   */
  timer_enable_irq(TIM2, TIM_DIER_CC2IE);
 80004b2:	2104      	movs	r1, #4
 80004b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004b8:	f000 fa28 	bl	800090c <timer_enable_irq>
  timer_generate_event(TIM2, TIM_EGR_UG);
 80004bc:	2101      	movs	r1, #1
 80004be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004c2:	f000 fb83 	bl	8000bcc <timer_generate_event>
}


static void tim3_setup(void)
{
  timer_reset(TIM3);
 80004c6:	483c      	ldr	r0, [pc, #240]	; (80005b8 <main+0x348>)
 80004c8:	f000 f9e0 	bl	800088c <timer_reset>
  timer_set_mode(TIM3, TIM_CR1_CKD_CK_INT,
 80004cc:	2300      	movs	r3, #0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4619      	mov	r1, r3
 80004d2:	4839      	ldr	r0, [pc, #228]	; (80005b8 <main+0x348>)
 80004d4:	f000 fa27 	bl	8000926 <timer_set_mode>
                 TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);

  timer_set_prescaler(TIM3, 1);
 80004d8:	2101      	movs	r1, #1
 80004da:	4837      	ldr	r0, [pc, #220]	; (80005b8 <main+0x348>)
 80004dc:	f000 fa40 	bl	8000960 <timer_set_prescaler>
  timer_enable_preload(TIM3);
 80004e0:	4835      	ldr	r0, [pc, #212]	; (80005b8 <main+0x348>)
 80004e2:	f000 fa29 	bl	8000938 <timer_enable_preload>
  
  timer_continuous_mode(TIM3);
 80004e6:	4834      	ldr	r0, [pc, #208]	; (80005b8 <main+0x348>)
 80004e8:	f000 fa2b 	bl	8000942 <timer_continuous_mode>

  timer_set_period(TIM3, 0x1000);
 80004ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f0:	4831      	ldr	r0, [pc, #196]	; (80005b8 <main+0x348>)
 80004f2:	f000 fa37 	bl	8000964 <timer_set_period>
  
  timer_set_oc_mode(TIM3, TIM_OC2, TIM_OCM_PWM1);
 80004f6:	2206      	movs	r2, #6
 80004f8:	2102      	movs	r1, #2
 80004fa:	482f      	ldr	r0, [pc, #188]	; (80005b8 <main+0x348>)
 80004fc:	f000 fa34 	bl	8000968 <timer_set_oc_mode>
  timer_enable_oc_preload(TIM3, TIM_OC2);
 8000500:	2102      	movs	r1, #2
 8000502:	482d      	ldr	r0, [pc, #180]	; (80005b8 <main+0x348>)
 8000504:	f000 fafc 	bl	8000b00 <timer_enable_oc_preload>
  timer_enable_oc_output(TIM3, TIM_OC2);
 8000508:	2102      	movs	r1, #2
 800050a:	482b      	ldr	r0, [pc, #172]	; (80005b8 <main+0x348>)
 800050c:	f000 fb12 	bl	8000b34 <timer_enable_oc_output>
  timer_set_oc_value(TIM3, TIM_OC2, 0x800);
 8000510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000514:	2102      	movs	r1, #2
 8000516:	4828      	ldr	r0, [pc, #160]	; (80005b8 <main+0x348>)
 8000518:	f000 fb48 	bl	8000bac <timer_set_oc_value>

  timer_set_counter(TIM3, 0x0000);
 800051c:	2100      	movs	r1, #0
 800051e:	4826      	ldr	r0, [pc, #152]	; (80005b8 <main+0x348>)
 8000520:	f000 fb58 	bl	8000bd4 <timer_set_counter>
    As the preload registers are transferred to the shadow registers only when an update event
    occurs, before starting the counter, you have to initialize all the registers by setting
    the UG bit in the TIMx_EGR register.

   */
  timer_generate_event(TIM3, TIM_EGR_UG);
 8000524:	2101      	movs	r1, #1
 8000526:	4824      	ldr	r0, [pc, #144]	; (80005b8 <main+0x348>)
 8000528:	f000 fb50 	bl	8000bcc <timer_generate_event>
  /* ------------------- TOP - BOT -- */
  uint8_t message1[] = {0xB8, 0xB8};

  uint8_t reply[3];
  
  gpio_set(GPIOA, GPIO9);
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	481c      	ldr	r0, [pc, #112]	; (80005a4 <main+0x334>)
 8000532:	f000 f917 	bl	8000764 <gpio_set>
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <main+0x34c>)
  
  for (uint32_t i = 0; i < 100000; i++){
    asm("nop");
 8000538:	bf00      	nop

  uint8_t reply[3];
  
  gpio_set(GPIOA, GPIO9);
  
  for (uint32_t i = 0; i < 100000; i++){
 800053a:	3b01      	subs	r3, #1
 800053c:	d1fc      	bne.n	8000538 <main+0x2c8>
static void l6474_message(uint8_t *msg_tx, uint8_t *msg_rx, uint8_t msg_len)
{
  uint8_t i;
  
  /* begin transmission */
  gpio_clear(GPIOB, GPIO6);
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4819      	ldr	r0, [pc, #100]	; (80005a8 <main+0x338>)
 8000542:	f000 f911 	bl	8000768 <gpio_clear>
    for(i = 0; i < msg_len; i++) {
      (void)spi_xfer(SPI1, msg_tx[i]);
    }
  } else {
    for(i = 0; i < msg_len; i++) {
      msg_rx[i] = spi_xfer(SPI1, msg_tx[i]);
 8000546:	21b8      	movs	r1, #184	; 0xb8
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <main+0x344>)
 800054a:	f000 f963 	bl	8000814 <spi_xfer>
 800054e:	21b8      	movs	r1, #184	; 0xb8
 8000550:	4818      	ldr	r0, [pc, #96]	; (80005b4 <main+0x344>)
 8000552:	f000 f95f 	bl	8000814 <spi_xfer>
    }
  }
  
  /* end transmission */
  gpio_set(GPIOB, GPIO6);
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <main+0x338>)
 800055a:	f000 f903 	bl	8000764 <gpio_set>
    asm("nop");
  }
  
  l6474_message(message1, reply, 2);
  
  gpio_clear(GPIOA, GPIO8);
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <main+0x334>)
 8000564:	f000 f900 	bl	8000768 <gpio_clear>
  gpio_set(GPIOB, GPIO5);
 8000568:	2120      	movs	r1, #32
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x338>)
 800056c:	f000 f8fa 	bl	8000764 <gpio_set>


  m1_target_period = 3100;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <main+0x350>)
 8000572:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000576:	601a      	str	r2, [r3, #0]
  step_count = 1;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0x354>)
 800057a:	2201      	movs	r2, #1
  timer_enable_counter(TIM2); // TOP
 800057c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  gpio_clear(GPIOA, GPIO8);
  gpio_set(GPIOB, GPIO5);


  m1_target_period = 3100;
  step_count = 1;
 8000580:	601a      	str	r2, [r3, #0]
  timer_enable_counter(TIM2); // TOP
 8000582:	f000 f9e3 	bl	800094c <timer_enable_counter>
  timer_enable_counter(TIM3); // BOT
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0x348>)
 8000588:	f000 f9e0 	bl	800094c <timer_enable_counter>

  
  while(1)
  {
    __WFI();
 800058c:	bf30      	wfi
 800058e:	e7fd      	b.n	800058c <main+0x31c>
 8000590:	20000000 	.word	0x20000000
 8000594:	05b8d800 	.word	0x05b8d800
 8000598:	20000004 	.word	0x20000004
 800059c:	02dc6c00 	.word	0x02dc6c00
 80005a0:	20000008 	.word	0x20000008
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40004400 	.word	0x40004400
 80005b4:	40013000 	.word	0x40013000
 80005b8:	40000400 	.word	0x40000400
 80005bc:	000186a0 	.word	0x000186a0
 80005c0:	20000010 	.word	0x20000010
 80005c4:	2000000c 	.word	0x2000000c

080005c8 <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(enum pwr_vos_scale scale)
{
	if (scale == PWR_SCALE1) {
 80005c8:	b920      	cbnz	r0, 80005d4 <pwr_set_vos_scale+0xc>
		PWR_CR |= PWR_CR_VOS;
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <pwr_set_vos_scale+0x1c>)
 80005cc:	6813      	ldr	r3, [r2, #0]
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	e005      	b.n	80005e0 <pwr_set_vos_scale+0x18>
	} else if (scale == PWR_SCALE2) {
 80005d4:	2801      	cmp	r0, #1
 80005d6:	d104      	bne.n	80005e2 <pwr_set_vos_scale+0x1a>
		PWR_CR &= PWR_CR_VOS;
 80005d8:	4a02      	ldr	r2, [pc, #8]	; (80005e4 <pwr_set_vos_scale+0x1c>)
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4770      	bx	lr
 80005e4:	40007000 	.word	0x40007000

080005e8 <rcc_wait_for_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 80005e8:	2804      	cmp	r0, #4
 80005ea:	d81c      	bhi.n	8000626 <rcc_wait_for_osc_ready+0x3e>
 80005ec:	e8df f000 	tbb	[pc, r0]
 80005f0:	120d0803 	.word	0x120d0803
 80005f4:	17          	.byte	0x17
 80005f5:	00          	.byte	0x00
	case RCC_PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <rcc_wait_for_osc_ready+0x40>)
 80005f8:	6813      	ldr	r3, [r2, #0]
 80005fa:	0199      	lsls	r1, r3, #6
 80005fc:	d5fc      	bpl.n	80005f8 <rcc_wait_for_osc_ready+0x10>
 80005fe:	4770      	bx	lr
		break;
	case RCC_HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <rcc_wait_for_osc_ready+0x40>)
 8000602:	6813      	ldr	r3, [r2, #0]
 8000604:	039b      	lsls	r3, r3, #14
 8000606:	d5fc      	bpl.n	8000602 <rcc_wait_for_osc_ready+0x1a>
 8000608:	4770      	bx	lr
		break;
	case RCC_HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <rcc_wait_for_osc_ready+0x40>)
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	0798      	lsls	r0, r3, #30
 8000610:	d5fc      	bpl.n	800060c <rcc_wait_for_osc_ready+0x24>
 8000612:	4770      	bx	lr
		break;
	case RCC_LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <rcc_wait_for_osc_ready+0x44>)
 8000616:	6813      	ldr	r3, [r2, #0]
 8000618:	0799      	lsls	r1, r3, #30
 800061a:	d5fc      	bpl.n	8000616 <rcc_wait_for_osc_ready+0x2e>
 800061c:	4770      	bx	lr
		break;
	case RCC_LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <rcc_wait_for_osc_ready+0x48>)
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	079b      	lsls	r3, r3, #30
 8000624:	d5fc      	bpl.n	8000620 <rcc_wait_for_osc_ready+0x38>
 8000626:	4770      	bx	lr
 8000628:	40023800 	.word	0x40023800
 800062c:	40023870 	.word	0x40023870
 8000630:	40023874 	.word	0x40023874

08000634 <rcc_wait_for_sysclk_status>:
	}
}

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
 8000634:	2801      	cmp	r0, #1
 8000636:	d101      	bne.n	800063c <rcc_wait_for_sysclk_status+0x8>
	case RCC_PLL:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_PLL);
		break;
	case RCC_HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <rcc_wait_for_sysclk_status+0x34>)
 800063a:	e00b      	b.n	8000654 <rcc_wait_for_sysclk_status+0x20>
	}
}

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
 800063c:	d303      	bcc.n	8000646 <rcc_wait_for_sysclk_status+0x12>
 800063e:	2802      	cmp	r0, #2
 8000640:	d111      	bne.n	8000666 <rcc_wait_for_sysclk_status+0x32>
		break;
	case RCC_HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
		break;
	case RCC_HSI:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSI);
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <rcc_wait_for_sysclk_status+0x34>)
 8000644:	e00c      	b.n	8000660 <rcc_wait_for_sysclk_status+0x2c>

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_PLL);
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <rcc_wait_for_sysclk_status+0x34>)
 8000648:	6813      	ldr	r3, [r2, #0]
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	2b02      	cmp	r3, #2
 8000650:	d1fa      	bne.n	8000648 <rcc_wait_for_sysclk_status+0x14>
 8000652:	4770      	bx	lr
		break;
	case RCC_HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1fa      	bne.n	8000654 <rcc_wait_for_sysclk_status+0x20>
 800065e:	4770      	bx	lr
		break;
	case RCC_HSI:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSI);
 8000660:	6813      	ldr	r3, [r2, #0]
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	d1fc      	bne.n	8000660 <rcc_wait_for_sysclk_status+0x2c>
 8000666:	4770      	bx	lr
 8000668:	40023808 	.word	0x40023808

0800066c <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 800066c:	2804      	cmp	r0, #4
 800066e:	d817      	bhi.n	80006a0 <rcc_osc_on+0x34>
 8000670:	e8df f000 	tbb	[pc, r0]
 8000674:	0f0d0803 	.word	0x0f0d0803
 8000678:	11          	.byte	0x11
 8000679:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <rcc_osc_on+0x38>)
 800067c:	6813      	ldr	r3, [r2, #0]
 800067e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000682:	e00c      	b.n	800069e <rcc_osc_on+0x32>
		break;
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <rcc_osc_on+0x38>)
 8000686:	6813      	ldr	r3, [r2, #0]
 8000688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068c:	e007      	b.n	800069e <rcc_osc_on+0x32>
		break;
	case RCC_HSI:
		RCC_CR |= RCC_CR_HSION;
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <rcc_osc_on+0x38>)
 8000690:	e002      	b.n	8000698 <rcc_osc_on+0x2c>
		break;
	case RCC_LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <rcc_osc_on+0x3c>)
 8000694:	e000      	b.n	8000698 <rcc_osc_on+0x2c>
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <rcc_osc_on+0x40>)
 8000698:	6813      	ldr	r3, [r2, #0]
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40023870 	.word	0x40023870
 80006ac:	40023874 	.word	0x40023874

080006b0 <rcc_osc_off>:
	}
}

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 80006b0:	2804      	cmp	r0, #4
 80006b2:	d817      	bhi.n	80006e4 <rcc_osc_off+0x34>
 80006b4:	e8df f000 	tbb	[pc, r0]
 80006b8:	0f0d0803 	.word	0x0f0d0803
 80006bc:	11          	.byte	0x11
 80006bd:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <rcc_osc_off+0x38>)
 80006c0:	6813      	ldr	r3, [r2, #0]
 80006c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006c6:	e00c      	b.n	80006e2 <rcc_osc_off+0x32>
		break;
	case RCC_HSE:
		RCC_CR &= ~RCC_CR_HSEON;
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <rcc_osc_off+0x38>)
 80006ca:	6813      	ldr	r3, [r2, #0]
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d0:	e007      	b.n	80006e2 <rcc_osc_off+0x32>
		break;
	case RCC_HSI:
		RCC_CR &= ~RCC_CR_HSION;
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <rcc_osc_off+0x38>)
 80006d4:	e002      	b.n	80006dc <rcc_osc_off+0x2c>
		break;
	case RCC_LSE:
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <rcc_osc_off+0x3c>)
 80006d8:	e000      	b.n	80006dc <rcc_osc_off+0x2c>
		break;
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <rcc_osc_off+0x40>)
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40023870 	.word	0x40023870
 80006f0:	40023874 	.word	0x40023874

080006f4 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <rcc_set_sysclk_source+0x10>)
 80006f6:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
	RCC_CFGR = (reg32 | clk);
 80006f8:	f023 0303 	bic.w	r3, r3, #3
 80006fc:	4318      	orrs	r0, r3
 80006fe:	6010      	str	r0, [r2, #0]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023808 	.word	0x40023808

08000708 <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <rcc_set_ppre2+0x10>)
 800070a:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
	RCC_CFGR = (reg32 | (ppre2 << 13));
 800070c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000710:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 8000714:	6010      	str	r0, [r2, #0]
 8000716:	4770      	bx	lr
 8000718:	40023808 	.word	0x40023808

0800071c <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <rcc_set_ppre1+0x10>)
 800071e:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000720:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000724:	ea43 2080 	orr.w	r0, r3, r0, lsl #10
 8000728:	6010      	str	r0, [r2, #0]
 800072a:	4770      	bx	lr
 800072c:	40023808 	.word	0x40023808

08000730 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <rcc_set_hpre+0x10>)
 8000732:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
	RCC_CFGR = (reg32 | (hpre << 4));
 8000734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000738:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800073c:	6010      	str	r0, [r2, #0]
 800073e:	4770      	bx	lr
 8000740:	40023808 	.word	0x40023808

08000744 <rcc_set_main_pll_hse>:
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
		RCC_PLLCFGR_PLLSRC |
 8000744:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	0852      	lsrs	r2, r2, #1
 800074e:	3a01      	subs	r2, #1
 8000750:	ea43 1181 	orr.w	r1, r3, r1, lsl #6
 8000754:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000758:	4a01      	ldr	r2, [pc, #4]	; (8000760 <rcc_set_main_pll_hse+0x1c>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023804 	.word	0x40023804

08000764 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000764:	6181      	str	r1, [r0, #24]
 8000766:	4770      	bx	lr

08000768 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000768:	0409      	lsls	r1, r1, #16
 800076a:	6181      	str	r1, [r0, #24]
 800076c:	4770      	bx	lr

0800076e <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 800076e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000772:	6805      	ldr	r5, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000774:	68c4      	ldr	r4, [r0, #12]
 8000776:	2600      	movs	r6, #0
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000778:	f04f 0c03 	mov.w	ip, #3
	 */
	moder = GPIO_MODER(gpioport);
	pupd = GPIO_PUPDR(gpioport);

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800077c:	fa43 f706 	asr.w	r7, r3, r6
 8000780:	07ff      	lsls	r7, r7, #31
 8000782:	d50f      	bpl.n	80007a4 <gpio_mode_setup+0x36>
 8000784:	0077      	lsls	r7, r6, #1
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000786:	fa0c fe07 	lsl.w	lr, ip, r7
 800078a:	ea6f 0e0e 	mvn.w	lr, lr
		moder |= GPIO_MODE(i, mode);
 800078e:	fa01 f807 	lsl.w	r8, r1, r7
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000792:	ea0e 0505 	and.w	r5, lr, r5
		moder |= GPIO_MODE(i, mode);
		pupd &= ~GPIO_PUPD_MASK(i);
 8000796:	ea0e 0404 	and.w	r4, lr, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 800079a:	fa02 f707 	lsl.w	r7, r2, r7
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
		moder |= GPIO_MODE(i, mode);
 800079e:	ea48 0505 	orr.w	r5, r8, r5
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
 80007a2:	433c      	orrs	r4, r7
 80007a4:	3601      	adds	r6, #1
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
	pupd = GPIO_PUPDR(gpioport);

	for (i = 0; i < 16; i++) {
 80007a6:	2e10      	cmp	r6, #16
 80007a8:	d1e8      	bne.n	800077c <gpio_mode_setup+0xe>
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80007aa:	6005      	str	r5, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 80007ac:	60c4      	str	r4, [r0, #12]
 80007ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080007b2 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 80007b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 80007b4:	6a07      	ldr	r7, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 80007b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80007b8:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 80007ba:	f04f 0e0f 	mov.w	lr, #15

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 80007be:	fa42 f403 	asr.w	r4, r2, r3
 80007c2:	07e5      	lsls	r5, r4, #31
 80007c4:	d507      	bpl.n	80007d6 <gpio_set_af+0x24>
 80007c6:	009d      	lsls	r5, r3, #2
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 80007c8:	fa0e f405 	lsl.w	r4, lr, r5
 80007cc:	ea27 0704 	bic.w	r7, r7, r4
		afrl |= GPIO_AFR(i, alt_func_num);
 80007d0:	fa01 f505 	lsl.w	r5, r1, r5
 80007d4:	432f      	orrs	r7, r5
 80007d6:	3301      	adds	r3, #1
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);

	for (i = 0; i < 8; i++) {
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d1f0      	bne.n	80007be <gpio_set_af+0xc>
 80007dc:	2300      	movs	r3, #0

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80007de:	f04f 0e0f 	mov.w	lr, #15
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80007e2:	f103 0408 	add.w	r4, r3, #8
 80007e6:	fa42 f404 	asr.w	r4, r2, r4
 80007ea:	07e4      	lsls	r4, r4, #31
 80007ec:	d507      	bpl.n	80007fe <gpio_set_af+0x4c>
 80007ee:	009c      	lsls	r4, r3, #2
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80007f0:	fa0e f504 	lsl.w	r5, lr, r4
 80007f4:	ea26 0605 	bic.w	r6, r6, r5
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80007f8:	fa01 f404 	lsl.w	r4, r1, r4
 80007fc:	4326      	orrs	r6, r4
 80007fe:	3301      	adds	r3, #1
		}
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
 8000800:	2b08      	cmp	r3, #8
 8000802:	d1ee      	bne.n	80007e2 <gpio_set_af+0x30>
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
		afrh |= GPIO_AFR(i - 8, alt_func_num);
	}

	GPIO_AFRL(gpioport) = afrl;
 8000804:	6207      	str	r7, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000806:	6246      	str	r6, [r0, #36]	; 0x24
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800080a <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 800080a:	6803      	ldr	r3, [r0, #0]
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6003      	str	r3, [r0, #0]
 8000812:	4770      	bx	lr

08000814 <spi_xfer>:
*/

void spi_write(uint32_t spi, uint16_t data)
{
	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 8000814:	60c1      	str	r1, [r0, #12]
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8000816:	6883      	ldr	r3, [r0, #8]
 8000818:	07db      	lsls	r3, r3, #31
 800081a:	d5fc      	bpl.n	8000816 <spi_xfer+0x2>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 800081c:	68c0      	ldr	r0, [r0, #12]
}
 800081e:	b280      	uxth	r0, r0
 8000820:	4770      	bx	lr

08000822 <spi_set_full_duplex_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_full_duplex_mode(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_RXONLY;
 8000822:	6803      	ldr	r3, [r0, #0]
 8000824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000828:	6003      	str	r3, [r0, #0]
 800082a:	4770      	bx	lr

0800082c <spi_enable_software_slave_management>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_software_slave_management(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSM;
 800082c:	6803      	ldr	r3, [r0, #0]
 800082e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000832:	6003      	str	r3, [r0, #0]
	/* allow slave select to be an input */
	SPI_CR2(spi) &= ~SPI_CR2_SSOE;
 8000834:	6843      	ldr	r3, [r0, #4]
 8000836:	f023 0304 	bic.w	r3, r3, #4
 800083a:	6043      	str	r3, [r0, #4]
 800083c:	4770      	bx	lr

0800083e <spi_set_nss_high>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_nss_high(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSI;
 800083e:	6803      	ldr	r3, [r0, #0]
 8000840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000844:	6003      	str	r3, [r0, #0]
 8000846:	4770      	bx	lr

08000848 <spi_send_msb_first>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_send_msb_first(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_LSBFIRST;
 8000848:	6803      	ldr	r3, [r0, #0]
 800084a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800084e:	6003      	str	r3, [r0, #0]
 8000850:	4770      	bx	lr

08000852 <spi_set_baudrate_prescaler>:

void spi_set_baudrate_prescaler(uint32_t spi, uint8_t baudrate)
{
	uint32_t reg32;

	if (baudrate > 7) {
 8000852:	2907      	cmp	r1, #7
 8000854:	d806      	bhi.n	8000864 <spi_set_baudrate_prescaler+0x12>
		return;
	}

	reg32 = (SPI_CR1(spi) & 0xffc7); /* Clear bits [5:3]. */
 8000856:	6802      	ldr	r2, [r0, #0]
 8000858:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800085c:	4013      	ands	r3, r2
	reg32 |= (baudrate << 3);
 800085e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
	SPI_CR1(spi) = reg32;
 8000862:	6003      	str	r3, [r0, #0]
 8000864:	4770      	bx	lr

08000866 <spi_set_master_mode>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_master_mode(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_MSTR;
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6003      	str	r3, [r0, #0]
 800086e:	4770      	bx	lr

08000870 <spi_set_standard_mode>:
@sa spi_set_clock_polarity_0 spi_set_clock_polarity_1
*/

void spi_set_standard_mode(uint32_t spi, uint8_t mode)
{
	if (mode > 3) {
 8000870:	2903      	cmp	r1, #3
		return;
	}

	uint32_t reg32 = SPI_CR1(spi) & ~(SPI_CR1_CPOL | SPI_CR1_CPHA);
 8000872:	bf9f      	itttt	ls
 8000874:	6803      	ldrls	r3, [r0, #0]
	SPI_CR1(spi) = reg32 | mode;
 8000876:	f023 0303 	bicls.w	r3, r3, #3
 800087a:	4319      	orrls	r1, r3
 800087c:	6001      	strls	r1, [r0, #0]
 800087e:	4770      	bx	lr

08000880 <spi_set_dff_8bit>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_dff_8bit(uint32_t spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_DFF;
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000886:	6003      	str	r3, [r0, #0]
 8000888:	4770      	bx	lr
	...

0800088c <timer_reset>:
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <timer_reset+0x74>)
 800088e:	4298      	cmp	r0, r3
 8000890:	d028      	beq.n	80008e4 <timer_reset+0x58>
 8000892:	d80d      	bhi.n	80008b0 <timer_reset+0x24>
 8000894:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000898:	4298      	cmp	r0, r3
 800089a:	d01d      	beq.n	80008d8 <timer_reset+0x4c>
 800089c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008a0:	4298      	cmp	r0, r3
 80008a2:	d01c      	beq.n	80008de <timer_reset+0x52>
 80008a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80008a8:	d129      	bne.n	80008fe <timer_reset+0x72>
	case TIM1:
		rcc_periph_reset_pulse(RST_TIM1);
		break;
#endif
	case TIM2:
		rcc_periph_reset_pulse(RST_TIM2);
 80008aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008ae:	e024      	b.n	80008fa <timer_reset+0x6e>
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <timer_reset+0x78>)
 80008b2:	4298      	cmp	r0, r3
 80008b4:	d01c      	beq.n	80008f0 <timer_reset+0x64>
 80008b6:	d804      	bhi.n	80008c2 <timer_reset+0x36>
 80008b8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80008bc:	4298      	cmp	r0, r3
 80008be:	d014      	beq.n	80008ea <timer_reset+0x5e>
 80008c0:	4770      	bx	lr
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <timer_reset+0x7c>)
 80008c4:	4298      	cmp	r0, r3
 80008c6:	d004      	beq.n	80008d2 <timer_reset+0x46>
 80008c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d012      	beq.n	80008f6 <timer_reset+0x6a>
 80008d0:	4770      	bx	lr
#if defined(TIM1_BASE)
	case TIM1:
		rcc_periph_reset_pulse(RST_TIM1);
 80008d2:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80008d6:	e010      	b.n	80008fa <timer_reset+0x6e>
#endif
	case TIM2:
		rcc_periph_reset_pulse(RST_TIM2);
		break;
	case TIM3:
		rcc_periph_reset_pulse(RST_TIM3);
 80008d8:	f240 4001 	movw	r0, #1025	; 0x401
 80008dc:	e00d      	b.n	80008fa <timer_reset+0x6e>
		break;
#if defined(TIM4_BASE)
	case TIM4:
		rcc_periph_reset_pulse(RST_TIM4);
 80008de:	f240 4002 	movw	r0, #1026	; 0x402
 80008e2:	e00a      	b.n	80008fa <timer_reset+0x6e>
		break;
#endif
#if defined(TIM5_BASE)
	case TIM5:
		rcc_periph_reset_pulse(RST_TIM5);
 80008e4:	f240 4003 	movw	r0, #1027	; 0x403
 80008e8:	e007      	b.n	80008fa <timer_reset+0x6e>
		break;
#endif
	case TIM6:
		rcc_periph_reset_pulse(RST_TIM6);
 80008ea:	f240 4004 	movw	r0, #1028	; 0x404
 80008ee:	e004      	b.n	80008fa <timer_reset+0x6e>
		break;
	case TIM7:
		rcc_periph_reset_pulse(RST_TIM7);
 80008f0:	f240 4005 	movw	r0, #1029	; 0x405
 80008f4:	e001      	b.n	80008fa <timer_reset+0x6e>
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_periph_reset_pulse(RST_TIM8);
 80008f6:	f240 4081 	movw	r0, #1153	; 0x481
 80008fa:	f000 b9c3 	b.w	8000c84 <rcc_periph_reset_pulse>
 80008fe:	4770      	bx	lr
 8000900:	40000c00 	.word	0x40000c00
 8000904:	40001400 	.word	0x40001400
 8000908:	40010000 	.word	0x40010000

0800090c <timer_enable_irq>:
enable bits to be set
*/

void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) |= irq;
 800090c:	68c3      	ldr	r3, [r0, #12]
 800090e:	4319      	orrs	r1, r3
 8000910:	60c1      	str	r1, [r0, #12]
 8000912:	4770      	bx	lr

08000914 <timer_get_flag>:
@returns boolean: flag set.
*/

bool timer_get_flag(uint32_t timer_peripheral, uint32_t flag)
{
	if ((TIM_SR(timer_peripheral) & flag) != 0) {
 8000914:	6903      	ldr	r3, [r0, #16]
 8000916:	420b      	tst	r3, r1
		return true;
	}

	return false;
}
 8000918:	bf14      	ite	ne
 800091a:	2001      	movne	r0, #1
 800091c:	2000      	moveq	r0, #0
 800091e:	4770      	bx	lr

08000920 <timer_clear_flag>:
*/

void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag)
{
	/* All defined bits are rc_w0 */
	TIM_SR(timer_peripheral) = ~flag;
 8000920:	43c9      	mvns	r1, r1
 8000922:	6101      	str	r1, [r0, #16]
 8000924:	4770      	bx	lr

08000926 <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 8000926:	b510      	push	{r4, lr}
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 8000928:	6804      	ldr	r4, [r0, #0]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);

	cr1 |= clock_div | alignment | direction;
 800092a:	431a      	orrs	r2, r3
{
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 800092c:	f424 745c 	bic.w	r4, r4, #880	; 0x370

	cr1 |= clock_div | alignment | direction;
 8000930:	4311      	orrs	r1, r2
 8000932:	430c      	orrs	r4, r1

	TIM_CR1(timer_peripheral) = cr1;
 8000934:	6004      	str	r4, [r0, #0]
 8000936:	bd10      	pop	{r4, pc}

08000938 <timer_enable_preload>:
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 8000938:	6803      	ldr	r3, [r0, #0]
 800093a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093e:	6003      	str	r3, [r0, #0]
 8000940:	4770      	bx	lr

08000942 <timer_continuous_mode>:
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 8000942:	6803      	ldr	r3, [r0, #0]
 8000944:	f023 0308 	bic.w	r3, r3, #8
 8000948:	6003      	str	r3, [r0, #0]
 800094a:	4770      	bx	lr

0800094c <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 800094c:	6803      	ldr	r3, [r0, #0]
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6003      	str	r3, [r0, #0]
 8000954:	4770      	bx	lr

08000956 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8000956:	6803      	ldr	r3, [r0, #0]
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	6003      	str	r3, [r0, #0]
 800095e:	4770      	bx	lr

08000960 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8000960:	6281      	str	r1, [r0, #40]	; 0x28
 8000962:	4770      	bx	lr

08000964 <timer_set_period>:
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
	TIM_ARR(timer_peripheral) = period;
 8000964:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000966:	4770      	bx	lr

08000968 <timer_set_oc_mode>:
*/

void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
		       enum tim_oc_mode oc_mode)
{
	switch (oc_id) {
 8000968:	2906      	cmp	r1, #6
 800096a:	f200 80c8 	bhi.w	8000afe <timer_set_oc_mode+0x196>
 800096e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000972:	0007      	.short	0x0007
 8000974:	003600c6 	.word	0x003600c6
 8000978:	006800c6 	.word	0x006800c6
 800097c:	009600c6 	.word	0x009600c6
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 8000980:	6983      	ldr	r3, [r0, #24]
 8000982:	f023 0303 	bic.w	r3, r3, #3
 8000986:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC1S_OUT;
 8000988:	6983      	ldr	r3, [r0, #24]
 800098a:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1M_MASK;
 800098c:	6983      	ldr	r3, [r0, #24]
 800098e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000992:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 8000994:	2a07      	cmp	r2, #7
 8000996:	f200 80b2 	bhi.w	8000afe <timer_set_oc_mode+0x196>
 800099a:	e8df f002 	tbb	[pc, r2]
 800099e:	0433      	.short	0x0433
 80009a0:	14100c08 	.word	0x14100c08
 80009a4:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_ACTIVE;
 80009a6:	6983      	ldr	r3, [r0, #24]
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	e047      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_INACTIVE;
 80009ae:	6983      	ldr	r3, [r0, #24]
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	e043      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_TOGGLE;
 80009b6:	6983      	ldr	r3, [r0, #24]
 80009b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80009bc:	e03f      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FORCE_LOW;
 80009be:	6983      	ldr	r3, [r0, #24]
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	e03b      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 80009c6:	6983      	ldr	r3, [r0, #24]
 80009c8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009cc:	e037      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			    TIM_CCMR1_OC1M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM1;
 80009ce:	6983      	ldr	r3, [r0, #24]
 80009d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80009d4:	e033      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM2;
 80009d6:	6983      	ldr	r3, [r0, #24]
 80009d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80009dc:	e02f      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		}
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 80009de:	6983      	ldr	r3, [r0, #24]
 80009e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e4:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC2S_OUT;
 80009e6:	6983      	ldr	r3, [r0, #24]
 80009e8:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2M_MASK;
 80009ea:	6983      	ldr	r3, [r0, #24]
 80009ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80009f0:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 80009f2:	2a07      	cmp	r2, #7
 80009f4:	f200 8083 	bhi.w	8000afe <timer_set_oc_mode+0x196>
 80009f8:	e8df f002 	tbb	[pc, r2]
 80009fc:	0e0a0604 	.word	0x0e0a0604
 8000a00:	1e1a1612 	.word	0x1e1a1612
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FROZEN;
 8000a04:	6983      	ldr	r3, [r0, #24]
 8000a06:	e01a      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_ACTIVE;
 8000a08:	6983      	ldr	r3, [r0, #24]
 8000a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0e:	e016      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_INACTIVE;
 8000a10:	6983      	ldr	r3, [r0, #24]
 8000a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a16:	e012      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_TOGGLE;
 8000a18:	6983      	ldr	r3, [r0, #24]
 8000a1a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000a1e:	e00e      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FORCE_LOW;
 8000a20:	6983      	ldr	r3, [r0, #24]
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	e00a      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 8000a28:	6983      	ldr	r3, [r0, #24]
 8000a2a:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000a2e:	e006      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			    TIM_CCMR1_OC2M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM1;
 8000a30:	6983      	ldr	r3, [r0, #24]
 8000a32:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000a36:	e002      	b.n	8000a3e <timer_set_oc_mode+0xd6>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM2;
 8000a38:	6983      	ldr	r3, [r0, #24]
 8000a3a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a3e:	6183      	str	r3, [r0, #24]
			break;
 8000a40:	4770      	bx	lr
		}
		break;
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 8000a42:	69c3      	ldr	r3, [r0, #28]
 8000a44:	f023 0303 	bic.w	r3, r3, #3
 8000a48:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_CC3S_OUT;
 8000a4a:	69c3      	ldr	r3, [r0, #28]
 8000a4c:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3M_MASK;
 8000a4e:	69c3      	ldr	r3, [r0, #28]
 8000a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a54:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 8000a56:	2a07      	cmp	r2, #7
 8000a58:	d851      	bhi.n	8000afe <timer_set_oc_mode+0x196>
 8000a5a:	e8df f002 	tbb	[pc, r2]
 8000a5e:	0432      	.short	0x0432
 8000a60:	14100c08 	.word	0x14100c08
 8000a64:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_ACTIVE;
 8000a66:	69c3      	ldr	r3, [r0, #28]
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	e046      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_INACTIVE;
 8000a6e:	69c3      	ldr	r3, [r0, #28]
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	e042      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_TOGGLE;
 8000a76:	69c3      	ldr	r3, [r0, #28]
 8000a78:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a7c:	e03e      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FORCE_LOW;
 8000a7e:	69c3      	ldr	r3, [r0, #28]
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	e03a      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 8000a86:	69c3      	ldr	r3, [r0, #28]
 8000a88:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a8c:	e036      	b.n	8000afc <timer_set_oc_mode+0x194>
			    TIM_CCMR2_OC3M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM1;
 8000a8e:	69c3      	ldr	r3, [r0, #28]
 8000a90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a94:	e032      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM2;
 8000a96:	69c3      	ldr	r3, [r0, #28]
 8000a98:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a9c:	e02e      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		}
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 8000a9e:	69c3      	ldr	r3, [r0, #28]
 8000aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa4:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_CC4S_OUT;
 8000aa6:	69c3      	ldr	r3, [r0, #28]
 8000aa8:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4M_MASK;
 8000aaa:	69c3      	ldr	r3, [r0, #28]
 8000aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ab0:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 8000ab2:	2a07      	cmp	r2, #7
 8000ab4:	d823      	bhi.n	8000afe <timer_set_oc_mode+0x196>
 8000ab6:	e8df f002 	tbb	[pc, r2]
 8000aba:	0604      	.short	0x0604
 8000abc:	16120e0a 	.word	0x16120e0a
 8000ac0:	1e1a      	.short	0x1e1a
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FROZEN;
 8000ac2:	69c3      	ldr	r3, [r0, #28]
 8000ac4:	e01a      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_ACTIVE;
 8000ac6:	69c3      	ldr	r3, [r0, #28]
 8000ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000acc:	e016      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_INACTIVE;
 8000ace:	69c3      	ldr	r3, [r0, #28]
 8000ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad4:	e012      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_TOGGLE;
 8000ad6:	69c3      	ldr	r3, [r0, #28]
 8000ad8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000adc:	e00e      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FORCE_LOW;
 8000ade:	69c3      	ldr	r3, [r0, #28]
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	e00a      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 8000ae6:	69c3      	ldr	r3, [r0, #28]
 8000ae8:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000aec:	e006      	b.n	8000afc <timer_set_oc_mode+0x194>
			    TIM_CCMR2_OC4M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM1;
 8000aee:	69c3      	ldr	r3, [r0, #28]
 8000af0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000af4:	e002      	b.n	8000afc <timer_set_oc_mode+0x194>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM2;
 8000af6:	69c3      	ldr	r3, [r0, #28]
 8000af8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000afc:	61c3      	str	r3, [r0, #28]
 8000afe:	4770      	bx	lr

08000b00 <timer_enable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8000b00:	2906      	cmp	r1, #6
 8000b02:	d816      	bhi.n	8000b32 <timer_enable_oc_preload+0x32>
 8000b04:	e8df f001 	tbb	[pc, r1]
 8000b08:	15081504 	.word	0x15081504
 8000b0c:	150d      	.short	0x150d
 8000b0e:	11          	.byte	0x11
 8000b0f:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1PE;
 8000b10:	6983      	ldr	r3, [r0, #24]
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	e002      	b.n	8000b1e <timer_enable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2PE;
 8000b18:	6983      	ldr	r3, [r0, #24]
 8000b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b1e:	6183      	str	r3, [r0, #24]
		break;
 8000b20:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3PE;
 8000b22:	69c3      	ldr	r3, [r0, #28]
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	e002      	b.n	8000b30 <timer_enable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4PE;
 8000b2a:	69c3      	ldr	r3, [r0, #28]
 8000b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b30:	61c3      	str	r3, [r0, #28]
 8000b32:	4770      	bx	lr

08000b34 <timer_enable_oc_output>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (only for advanced
		timers 1 and 8)
*/

void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <timer_enable_oc_output+0x70>)
	switch (oc_id) {
 8000b36:	2906      	cmp	r1, #6
 8000b38:	d818      	bhi.n	8000b6c <timer_enable_oc_output+0x38>
 8000b3a:	e8df f001 	tbb	[pc, r1]
 8000b3e:	1704      	.short	0x1704
 8000b40:	170c1708 	.word	0x170c1708
 8000b44:	10          	.byte	0x10
 8000b45:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1E;
 8000b46:	6a03      	ldr	r3, [r0, #32]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	e00a      	b.n	8000b64 <timer_enable_oc_output+0x30>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2E;
 8000b4e:	6a03      	ldr	r3, [r0, #32]
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	e006      	b.n	8000b64 <timer_enable_oc_output+0x30>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
 8000b56:	6a03      	ldr	r3, [r0, #32]
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	e002      	b.n	8000b64 <timer_enable_oc_output+0x30>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 8000b5e:	6a03      	ldr	r3, [r0, #32]
 8000b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8000b64:	4290      	cmp	r0, r2
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 8000b66:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8000b68:	d109      	bne.n	8000b7e <timer_enable_oc_output+0x4a>
 8000b6a:	e019      	b.n	8000ba0 <timer_enable_oc_output+0x6c>
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	d106      	bne.n	8000b7e <timer_enable_oc_output+0x4a>
	}
#else
	return;
#endif

	switch (oc_id) {
 8000b70:	2903      	cmp	r1, #3
 8000b72:	d00c      	beq.n	8000b8e <timer_enable_oc_output+0x5a>
 8000b74:	2905      	cmp	r1, #5
 8000b76:	d00e      	beq.n	8000b96 <timer_enable_oc_output+0x62>
 8000b78:	2901      	cmp	r1, #1
 8000b7a:	d004      	beq.n	8000b86 <timer_enable_oc_output+0x52>
 8000b7c:	4770      	bx	lr
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <timer_enable_oc_output+0x74>)
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d10d      	bne.n	8000ba0 <timer_enable_oc_output+0x6c>
 8000b84:	e7f4      	b.n	8000b70 <timer_enable_oc_output+0x3c>
	return;
#endif

	switch (oc_id) {
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NE;
 8000b86:	6a03      	ldr	r3, [r0, #32]
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	e006      	b.n	8000b9c <timer_enable_oc_output+0x68>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NE;
 8000b8e:	6a03      	ldr	r3, [r0, #32]
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	e002      	b.n	8000b9c <timer_enable_oc_output+0x68>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NE;
 8000b96:	6a03      	ldr	r3, [r0, #32]
 8000b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9c:	6203      	str	r3, [r0, #32]
		break;
 8000b9e:	4770      	bx	lr
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	40010400 	.word	0x40010400

08000bac <timer_set_oc_value>:
*/

void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
			uint32_t value)
{
	switch (oc_id) {
 8000bac:	2906      	cmp	r1, #6
 8000bae:	d80c      	bhi.n	8000bca <timer_set_oc_value+0x1e>
 8000bb0:	e8df f001 	tbb	[pc, r1]
 8000bb4:	0b060b04 	.word	0x0b060b04
 8000bb8:	0b08      	.short	0x0b08
 8000bba:	0a          	.byte	0x0a
 8000bbb:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCR1(timer_peripheral) = value;
 8000bbc:	6342      	str	r2, [r0, #52]	; 0x34
		break;
 8000bbe:	4770      	bx	lr
	case TIM_OC2:
		TIM_CCR2(timer_peripheral) = value;
 8000bc0:	6382      	str	r2, [r0, #56]	; 0x38
		break;
 8000bc2:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCR3(timer_peripheral) = value;
 8000bc4:	63c2      	str	r2, [r0, #60]	; 0x3c
		break;
 8000bc6:	4770      	bx	lr
	case TIM_OC4:
		TIM_CCR4(timer_peripheral) = value;
 8000bc8:	6402      	str	r2, [r0, #64]	; 0x40
 8000bca:	4770      	bx	lr

08000bcc <timer_generate_event>:
@param[in] event Unsigned int32. Event specification @ref tim_event_gen
*/

void timer_generate_event(uint32_t timer_peripheral, uint32_t event)
{
	TIM_EGR(timer_peripheral) |= event;
 8000bcc:	6943      	ldr	r3, [r0, #20]
 8000bce:	4319      	orrs	r1, r3
 8000bd0:	6141      	str	r1, [r0, #20]
 8000bd2:	4770      	bx	lr

08000bd4 <timer_set_counter>:
@param[in] count Unsigned int32. Counter value.
*/

void timer_set_counter(uint32_t timer_peripheral, uint32_t count)
{
	TIM_CNT(timer_peripheral) = count;
 8000bd4:	6241      	str	r1, [r0, #36]	; 0x24
 8000bd6:	4770      	bx	lr

08000bd8 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined STM32F2 || defined STM32F4
	if ((usart == USART1) ||
 8000bd8:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <usart_set_baudrate+0x24>)
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <usart_set_baudrate+0x28>)
usart_reg_base
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
 8000bdc:	b510      	push	{r4, lr}
	uint32_t clock = rcc_apb1_frequency;

#if defined STM32F2 || defined STM32F4
	if ((usart == USART1) ||
 8000bde:	f420 6480 	bic.w	r4, r0, #1024	; 0x400
 8000be2:	4294      	cmp	r4, r2
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;
 8000be4:	681b      	ldr	r3, [r3, #0]

#if defined STM32F2 || defined STM32F4
	if ((usart == USART1) ||
	    (usart == USART6)) {
		clock = rcc_apb2_frequency;
 8000be6:	bf04      	itt	eq
 8000be8:	4b06      	ldreq	r3, [pc, #24]	; (8000c04 <usart_set_baudrate+0x2c>)
 8000bea:	681b      	ldreq	r3, [r3, #0]
	 * simple divider to generate the correct baudrate.
	 *
	 * Note: We round() the value rather than floor()ing it, for more
	 * accurate divisor selection.
	 */
	USART_BRR(usart) = ((2 * clock) + baud) / (2 * baud);
 8000bec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	6083      	str	r3, [r0, #8]
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	20000004 	.word	0x20000004
 8000c04:	20000008 	.word	0x20000008

08000c08 <usart_set_databits>:
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8000c08:	68c3      	ldr	r3, [r0, #12]
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8000c0a:	2908      	cmp	r1, #8
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8000c0c:	bf0c      	ite	eq
 8000c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c16:	60c3      	str	r3, [r0, #12]
 8000c18:	4770      	bx	lr

08000c1a <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8000c1a:	6903      	ldr	r3, [r0, #16]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8000c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c20:	4319      	orrs	r1, r3
	USART_CR2(usart) = reg32;
 8000c22:	6101      	str	r1, [r0, #16]
 8000c24:	4770      	bx	lr

08000c26 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000c26:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8000c28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2c:	4319      	orrs	r1, r3
	USART_CR1(usart) = reg32;
 8000c2e:	60c1      	str	r1, [r0, #12]
 8000c30:	4770      	bx	lr

08000c32 <usart_set_mode>:

void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000c32:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000c34:	f023 030c 	bic.w	r3, r3, #12
 8000c38:	4319      	orrs	r1, r3
	USART_CR1(usart) = reg32;
 8000c3a:	60c1      	str	r1, [r0, #12]
 8000c3c:	4770      	bx	lr

08000c3e <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8000c3e:	6943      	ldr	r3, [r0, #20]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8000c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c44:	4319      	orrs	r1, r3
	USART_CR3(usart) = reg32;
 8000c46:	6141      	str	r1, [r0, #20]
 8000c48:	4770      	bx	lr

08000c4a <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8000c4a:	68c3      	ldr	r3, [r0, #12]
 8000c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c50:	60c3      	str	r3, [r0, #12]
 8000c52:	4770      	bx	lr

08000c54 <flash_set_ws>:
*/
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <flash_set_ws+0x10>)
 8000c56:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 8000c58:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= ws;
 8000c5c:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 8000c5e:	6010      	str	r0, [r2, #0]
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000c68:	0943      	lsrs	r3, r0, #5
 8000c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c6e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000c72:	f000 001f 	and.w	r0, r0, #31
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fa01 f000 	lsl.w	r0, r1, r0
 8000c7e:	4310      	orrs	r0, r2
 8000c80:	6018      	str	r0, [r3, #0]
 8000c82:	4770      	bx	lr

08000c84 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000c84:	0943      	lsrs	r3, r0, #5
 8000c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c8a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000c8e:	2201      	movs	r2, #1
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	f000 001f 	and.w	r0, r0, #31
 8000c96:	fa02 f000 	lsl.w	r0, r2, r0
 8000c9a:	ea40 0201 	orr.w	r2, r0, r1
 8000c9e:	601a      	str	r2, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	ea22 0000 	bic.w	r0, r2, r0
 8000ca6:	6018      	str	r0, [r3, #0]
 8000ca8:	4770      	bx	lr

08000caa <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8000caa:	e7fe      	b.n	8000caa <blocking_handler>

08000cac <null_handler>:
	while (1);
}

void null_handler(void)
{
 8000cac:	4770      	bx	lr
	...

08000cb0 <reset_handler>:
		IRQ_HANDLERS
	}
};

void __attribute__ ((weak, naked)) reset_handler(void)
{
 8000cb0:	4c1a      	ldr	r4, [pc, #104]	; (8000d1c <reset_handler+0x6c>)
 8000cb2:	491b      	ldr	r1, [pc, #108]	; (8000d20 <reset_handler+0x70>)
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <reset_handler+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	1853      	adds	r3, r2, r1
 8000cba:	4283      	cmp	r3, r0
 8000cbc:	d203      	bcs.n	8000cc6 <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8000cbe:	5913      	ldr	r3, [r2, r4]
 8000cc0:	5053      	str	r3, [r2, r1]
 8000cc2:	3204      	adds	r2, #4
 8000cc4:	e7f8      	b.n	8000cb8 <reset_handler+0x8>
	}

	while (dest < &_ebss) {
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <reset_handler+0x78>)
		*dest++ = 0;
 8000cc8:	2100      	movs	r1, #0
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d202      	bcs.n	8000cd4 <reset_handler+0x24>
		*dest++ = 0;
 8000cce:	6019      	str	r1, [r3, #0]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	e7fa      	b.n	8000cca <reset_handler+0x1a>
	}

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <reset_handler+0x7c>)

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000cd6:	4c16      	ldr	r4, [pc, #88]	; (8000d30 <reset_handler+0x80>)
		*dest++ = 0;
	}

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000cd8:	6813      	ldr	r3, [r2, #0]

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000cda:	4d16      	ldr	r5, [pc, #88]	; (8000d34 <reset_handler+0x84>)
		*dest++ = 0;
	}

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6013      	str	r3, [r2, #0]
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8000ce2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	6753      	str	r3, [r2, #116]	; 0x74

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	d203      	bcs.n	8000cf6 <reset_handler+0x46>
		(*fp)();
 8000cee:	f854 3b04 	ldr.w	r3, [r4], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	e7f9      	b.n	8000cea <reset_handler+0x3a>
 8000cf6:	4c10      	ldr	r4, [pc, #64]	; (8000d38 <reset_handler+0x88>)
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000cf8:	4d10      	ldr	r5, [pc, #64]	; (8000d3c <reset_handler+0x8c>)
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	d203      	bcs.n	8000d06 <reset_handler+0x56>
		(*fp)();
 8000cfe:	f854 3b04 	ldr.w	r3, [r4], #4
 8000d02:	4798      	blx	r3
 8000d04:	e7f9      	b.n	8000cfa <reset_handler+0x4a>
	}

	/* Call the application's entry point. */
	main();
 8000d06:	f7ff fab3 	bl	8000270 <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000d0a:	4c0d      	ldr	r4, [pc, #52]	; (8000d40 <reset_handler+0x90>)
 8000d0c:	4d0d      	ldr	r5, [pc, #52]	; (8000d44 <reset_handler+0x94>)
 8000d0e:	42ac      	cmp	r4, r5
 8000d10:	d203      	bcs.n	8000d1a <reset_handler+0x6a>
		(*fp)();
 8000d12:	f854 3b04 	ldr.w	r3, [r4], #4
 8000d16:	4798      	blx	r3
 8000d18:	e7f9      	b.n	8000d0e <reset_handler+0x5e>
 8000d1a:	bf00      	nop
 8000d1c:	08001538 	.word	0x08001538
 8000d20:	20000000 	.word	0x20000000
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	e000ed14 	.word	0xe000ed14
 8000d30:	08001538 	.word	0x08001538
 8000d34:	08001538 	.word	0x08001538
 8000d38:	08001538 	.word	0x08001538
 8000d3c:	08001538 	.word	0x08001538
 8000d40:	08001538 	.word	0x08001538
 8000d44:	08001538 	.word	0x08001538

08000d48 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <nvic_enable_irq+0x18>)
 8000d4a:	0942      	lsrs	r2, r0, #5
 8000d4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d50:	f000 001f 	and.w	r0, r0, #31
 8000d54:	2201      	movs	r2, #1
 8000d56:	fa02 f000 	lsl.w	r0, r2, r0
 8000d5a:	6018      	str	r0, [r3, #0]
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__aeabi_drsub>:
 8000d64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000d68:	e002      	b.n	8000d70 <__adddf3>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dsub>:
 8000d6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000d70 <__adddf3>:
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000d76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000d7a:	ea94 0f05 	teq	r4, r5
 8000d7e:	bf08      	it	eq
 8000d80:	ea90 0f02 	teqeq	r0, r2
 8000d84:	bf1f      	itttt	ne
 8000d86:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000d8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000d8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000d92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000d96:	f000 80e2 	beq.w	8000f5e <__adddf3+0x1ee>
 8000d9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000d9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000da2:	bfb8      	it	lt
 8000da4:	426d      	neglt	r5, r5
 8000da6:	dd0c      	ble.n	8000dc2 <__adddf3+0x52>
 8000da8:	442c      	add	r4, r5
 8000daa:	ea80 0202 	eor.w	r2, r0, r2
 8000dae:	ea81 0303 	eor.w	r3, r1, r3
 8000db2:	ea82 0000 	eor.w	r0, r2, r0
 8000db6:	ea83 0101 	eor.w	r1, r3, r1
 8000dba:	ea80 0202 	eor.w	r2, r0, r2
 8000dbe:	ea81 0303 	eor.w	r3, r1, r3
 8000dc2:	2d36      	cmp	r5, #54	; 0x36
 8000dc4:	bf88      	it	hi
 8000dc6:	bd30      	pophi	{r4, r5, pc}
 8000dc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000dd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000dd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000dd8:	d002      	beq.n	8000de0 <__adddf3+0x70>
 8000dda:	4240      	negs	r0, r0
 8000ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000de8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000dec:	d002      	beq.n	8000df4 <__adddf3+0x84>
 8000dee:	4252      	negs	r2, r2
 8000df0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000df4:	ea94 0f05 	teq	r4, r5
 8000df8:	f000 80a7 	beq.w	8000f4a <__adddf3+0x1da>
 8000dfc:	f1a4 0401 	sub.w	r4, r4, #1
 8000e00:	f1d5 0e20 	rsbs	lr, r5, #32
 8000e04:	db0d      	blt.n	8000e22 <__adddf3+0xb2>
 8000e06:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000e0a:	fa22 f205 	lsr.w	r2, r2, r5
 8000e0e:	1880      	adds	r0, r0, r2
 8000e10:	f141 0100 	adc.w	r1, r1, #0
 8000e14:	fa03 f20e 	lsl.w	r2, r3, lr
 8000e18:	1880      	adds	r0, r0, r2
 8000e1a:	fa43 f305 	asr.w	r3, r3, r5
 8000e1e:	4159      	adcs	r1, r3
 8000e20:	e00e      	b.n	8000e40 <__adddf3+0xd0>
 8000e22:	f1a5 0520 	sub.w	r5, r5, #32
 8000e26:	f10e 0e20 	add.w	lr, lr, #32
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000e30:	bf28      	it	cs
 8000e32:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000e36:	fa43 f305 	asr.w	r3, r3, r5
 8000e3a:	18c0      	adds	r0, r0, r3
 8000e3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000e40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e44:	d507      	bpl.n	8000e56 <__adddf3+0xe6>
 8000e46:	f04f 0e00 	mov.w	lr, #0
 8000e4a:	f1dc 0c00 	rsbs	ip, ip, #0
 8000e4e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000e52:	eb6e 0101 	sbc.w	r1, lr, r1
 8000e56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000e5a:	d31b      	bcc.n	8000e94 <__adddf3+0x124>
 8000e5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000e60:	d30c      	bcc.n	8000e7c <__adddf3+0x10c>
 8000e62:	0849      	lsrs	r1, r1, #1
 8000e64:	ea5f 0030 	movs.w	r0, r0, rrx
 8000e68:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000e6c:	f104 0401 	add.w	r4, r4, #1
 8000e70:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000e74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000e78:	f080 809a 	bcs.w	8000fb0 <__adddf3+0x240>
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	bf08      	it	eq
 8000e82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e86:	f150 0000 	adcs.w	r0, r0, #0
 8000e8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e8e:	ea41 0105 	orr.w	r1, r1, r5
 8000e92:	bd30      	pop	{r4, r5, pc}
 8000e94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000e98:	4140      	adcs	r0, r0
 8000e9a:	eb41 0101 	adc.w	r1, r1, r1
 8000e9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ea2:	f1a4 0401 	sub.w	r4, r4, #1
 8000ea6:	d1e9      	bne.n	8000e7c <__adddf3+0x10c>
 8000ea8:	f091 0f00 	teq	r1, #0
 8000eac:	bf04      	itt	eq
 8000eae:	4601      	moveq	r1, r0
 8000eb0:	2000      	moveq	r0, #0
 8000eb2:	fab1 f381 	clz	r3, r1
 8000eb6:	bf08      	it	eq
 8000eb8:	3320      	addeq	r3, #32
 8000eba:	f1a3 030b 	sub.w	r3, r3, #11
 8000ebe:	f1b3 0220 	subs.w	r2, r3, #32
 8000ec2:	da0c      	bge.n	8000ede <__adddf3+0x16e>
 8000ec4:	320c      	adds	r2, #12
 8000ec6:	dd08      	ble.n	8000eda <__adddf3+0x16a>
 8000ec8:	f102 0c14 	add.w	ip, r2, #20
 8000ecc:	f1c2 020c 	rsb	r2, r2, #12
 8000ed0:	fa01 f00c 	lsl.w	r0, r1, ip
 8000ed4:	fa21 f102 	lsr.w	r1, r1, r2
 8000ed8:	e00c      	b.n	8000ef4 <__adddf3+0x184>
 8000eda:	f102 0214 	add.w	r2, r2, #20
 8000ede:	bfd8      	it	le
 8000ee0:	f1c2 0c20 	rsble	ip, r2, #32
 8000ee4:	fa01 f102 	lsl.w	r1, r1, r2
 8000ee8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000eec:	bfdc      	itt	le
 8000eee:	ea41 010c 	orrle.w	r1, r1, ip
 8000ef2:	4090      	lslle	r0, r2
 8000ef4:	1ae4      	subs	r4, r4, r3
 8000ef6:	bfa2      	ittt	ge
 8000ef8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000efc:	4329      	orrge	r1, r5
 8000efe:	bd30      	popge	{r4, r5, pc}
 8000f00:	ea6f 0404 	mvn.w	r4, r4
 8000f04:	3c1f      	subs	r4, #31
 8000f06:	da1c      	bge.n	8000f42 <__adddf3+0x1d2>
 8000f08:	340c      	adds	r4, #12
 8000f0a:	dc0e      	bgt.n	8000f2a <__adddf3+0x1ba>
 8000f0c:	f104 0414 	add.w	r4, r4, #20
 8000f10:	f1c4 0220 	rsb	r2, r4, #32
 8000f14:	fa20 f004 	lsr.w	r0, r0, r4
 8000f18:	fa01 f302 	lsl.w	r3, r1, r2
 8000f1c:	ea40 0003 	orr.w	r0, r0, r3
 8000f20:	fa21 f304 	lsr.w	r3, r1, r4
 8000f24:	ea45 0103 	orr.w	r1, r5, r3
 8000f28:	bd30      	pop	{r4, r5, pc}
 8000f2a:	f1c4 040c 	rsb	r4, r4, #12
 8000f2e:	f1c4 0220 	rsb	r2, r4, #32
 8000f32:	fa20 f002 	lsr.w	r0, r0, r2
 8000f36:	fa01 f304 	lsl.w	r3, r1, r4
 8000f3a:	ea40 0003 	orr.w	r0, r0, r3
 8000f3e:	4629      	mov	r1, r5
 8000f40:	bd30      	pop	{r4, r5, pc}
 8000f42:	fa21 f004 	lsr.w	r0, r1, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	bd30      	pop	{r4, r5, pc}
 8000f4a:	f094 0f00 	teq	r4, #0
 8000f4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000f52:	bf06      	itte	eq
 8000f54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000f58:	3401      	addeq	r4, #1
 8000f5a:	3d01      	subne	r5, #1
 8000f5c:	e74e      	b.n	8000dfc <__adddf3+0x8c>
 8000f5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f62:	bf18      	it	ne
 8000f64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f68:	d029      	beq.n	8000fbe <__adddf3+0x24e>
 8000f6a:	ea94 0f05 	teq	r4, r5
 8000f6e:	bf08      	it	eq
 8000f70:	ea90 0f02 	teqeq	r0, r2
 8000f74:	d005      	beq.n	8000f82 <__adddf3+0x212>
 8000f76:	ea54 0c00 	orrs.w	ip, r4, r0
 8000f7a:	bf04      	itt	eq
 8000f7c:	4619      	moveq	r1, r3
 8000f7e:	4610      	moveq	r0, r2
 8000f80:	bd30      	pop	{r4, r5, pc}
 8000f82:	ea91 0f03 	teq	r1, r3
 8000f86:	bf1e      	ittt	ne
 8000f88:	2100      	movne	r1, #0
 8000f8a:	2000      	movne	r0, #0
 8000f8c:	bd30      	popne	{r4, r5, pc}
 8000f8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000f92:	d105      	bne.n	8000fa0 <__adddf3+0x230>
 8000f94:	0040      	lsls	r0, r0, #1
 8000f96:	4149      	adcs	r1, r1
 8000f98:	bf28      	it	cs
 8000f9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000f9e:	bd30      	pop	{r4, r5, pc}
 8000fa0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000fa4:	bf3c      	itt	cc
 8000fa6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000faa:	bd30      	popcc	{r4, r5, pc}
 8000fac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000fb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000fb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	bd30      	pop	{r4, r5, pc}
 8000fbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000fc2:	bf1a      	itte	ne
 8000fc4:	4619      	movne	r1, r3
 8000fc6:	4610      	movne	r0, r2
 8000fc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000fcc:	bf1c      	itt	ne
 8000fce:	460b      	movne	r3, r1
 8000fd0:	4602      	movne	r2, r0
 8000fd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000fd6:	bf06      	itte	eq
 8000fd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000fdc:	ea91 0f03 	teqeq	r1, r3
 8000fe0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000fe4:	bd30      	pop	{r4, r5, pc}
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_ui2d>:
 8000fe8:	f090 0f00 	teq	r0, #0
 8000fec:	bf04      	itt	eq
 8000fee:	2100      	moveq	r1, #0
 8000ff0:	4770      	bxeq	lr
 8000ff2:	b530      	push	{r4, r5, lr}
 8000ff4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ff8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ffc:	f04f 0500 	mov.w	r5, #0
 8001000:	f04f 0100 	mov.w	r1, #0
 8001004:	e750      	b.n	8000ea8 <__adddf3+0x138>
 8001006:	bf00      	nop

08001008 <__aeabi_i2d>:
 8001008:	f090 0f00 	teq	r0, #0
 800100c:	bf04      	itt	eq
 800100e:	2100      	moveq	r1, #0
 8001010:	4770      	bxeq	lr
 8001012:	b530      	push	{r4, r5, lr}
 8001014:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001018:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800101c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001020:	bf48      	it	mi
 8001022:	4240      	negmi	r0, r0
 8001024:	f04f 0100 	mov.w	r1, #0
 8001028:	e73e      	b.n	8000ea8 <__adddf3+0x138>
 800102a:	bf00      	nop

0800102c <__aeabi_f2d>:
 800102c:	0042      	lsls	r2, r0, #1
 800102e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001032:	ea4f 0131 	mov.w	r1, r1, rrx
 8001036:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800103a:	bf1f      	itttt	ne
 800103c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001040:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001044:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001048:	4770      	bxne	lr
 800104a:	f092 0f00 	teq	r2, #0
 800104e:	bf14      	ite	ne
 8001050:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001054:	4770      	bxeq	lr
 8001056:	b530      	push	{r4, r5, lr}
 8001058:	f44f 7460 	mov.w	r4, #896	; 0x380
 800105c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001060:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001064:	e720      	b.n	8000ea8 <__adddf3+0x138>
 8001066:	bf00      	nop

08001068 <__aeabi_ul2d>:
 8001068:	ea50 0201 	orrs.w	r2, r0, r1
 800106c:	bf08      	it	eq
 800106e:	4770      	bxeq	lr
 8001070:	b530      	push	{r4, r5, lr}
 8001072:	f04f 0500 	mov.w	r5, #0
 8001076:	e00a      	b.n	800108e <__aeabi_l2d+0x16>

08001078 <__aeabi_l2d>:
 8001078:	ea50 0201 	orrs.w	r2, r0, r1
 800107c:	bf08      	it	eq
 800107e:	4770      	bxeq	lr
 8001080:	b530      	push	{r4, r5, lr}
 8001082:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001086:	d502      	bpl.n	800108e <__aeabi_l2d+0x16>
 8001088:	4240      	negs	r0, r0
 800108a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800108e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001092:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001096:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800109a:	f43f aedc 	beq.w	8000e56 <__adddf3+0xe6>
 800109e:	f04f 0203 	mov.w	r2, #3
 80010a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80010a6:	bf18      	it	ne
 80010a8:	3203      	addne	r2, #3
 80010aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80010ae:	bf18      	it	ne
 80010b0:	3203      	addne	r2, #3
 80010b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80010b6:	f1c2 0320 	rsb	r3, r2, #32
 80010ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80010be:	fa20 f002 	lsr.w	r0, r0, r2
 80010c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80010c6:	ea40 000e 	orr.w	r0, r0, lr
 80010ca:	fa21 f102 	lsr.w	r1, r1, r2
 80010ce:	4414      	add	r4, r2
 80010d0:	e6c1      	b.n	8000e56 <__adddf3+0xe6>
 80010d2:	bf00      	nop

080010d4 <__aeabi_dmul>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80010da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80010de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80010e2:	bf1d      	ittte	ne
 80010e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80010e8:	ea94 0f0c 	teqne	r4, ip
 80010ec:	ea95 0f0c 	teqne	r5, ip
 80010f0:	f000 f8de 	bleq	80012b0 <__aeabi_dmul+0x1dc>
 80010f4:	442c      	add	r4, r5
 80010f6:	ea81 0603 	eor.w	r6, r1, r3
 80010fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80010fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001102:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001106:	bf18      	it	ne
 8001108:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800110c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001114:	d038      	beq.n	8001188 <__aeabi_dmul+0xb4>
 8001116:	fba0 ce02 	umull	ip, lr, r0, r2
 800111a:	f04f 0500 	mov.w	r5, #0
 800111e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001122:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001126:	fbe0 e503 	umlal	lr, r5, r0, r3
 800112a:	f04f 0600 	mov.w	r6, #0
 800112e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001132:	f09c 0f00 	teq	ip, #0
 8001136:	bf18      	it	ne
 8001138:	f04e 0e01 	orrne.w	lr, lr, #1
 800113c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001140:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001144:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001148:	d204      	bcs.n	8001154 <__aeabi_dmul+0x80>
 800114a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800114e:	416d      	adcs	r5, r5
 8001150:	eb46 0606 	adc.w	r6, r6, r6
 8001154:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001158:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800115c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001160:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001164:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001168:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800116c:	bf88      	it	hi
 800116e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001172:	d81e      	bhi.n	80011b2 <__aeabi_dmul+0xde>
 8001174:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001178:	bf08      	it	eq
 800117a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800117e:	f150 0000 	adcs.w	r0, r0, #0
 8001182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800118c:	ea46 0101 	orr.w	r1, r6, r1
 8001190:	ea40 0002 	orr.w	r0, r0, r2
 8001194:	ea81 0103 	eor.w	r1, r1, r3
 8001198:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800119c:	bfc2      	ittt	gt
 800119e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80011a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80011a6:	bd70      	popgt	{r4, r5, r6, pc}
 80011a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011ac:	f04f 0e00 	mov.w	lr, #0
 80011b0:	3c01      	subs	r4, #1
 80011b2:	f300 80ab 	bgt.w	800130c <__aeabi_dmul+0x238>
 80011b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80011ba:	bfde      	ittt	le
 80011bc:	2000      	movle	r0, #0
 80011be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80011c2:	bd70      	pople	{r4, r5, r6, pc}
 80011c4:	f1c4 0400 	rsb	r4, r4, #0
 80011c8:	3c20      	subs	r4, #32
 80011ca:	da35      	bge.n	8001238 <__aeabi_dmul+0x164>
 80011cc:	340c      	adds	r4, #12
 80011ce:	dc1b      	bgt.n	8001208 <__aeabi_dmul+0x134>
 80011d0:	f104 0414 	add.w	r4, r4, #20
 80011d4:	f1c4 0520 	rsb	r5, r4, #32
 80011d8:	fa00 f305 	lsl.w	r3, r0, r5
 80011dc:	fa20 f004 	lsr.w	r0, r0, r4
 80011e0:	fa01 f205 	lsl.w	r2, r1, r5
 80011e4:	ea40 0002 	orr.w	r0, r0, r2
 80011e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80011ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80011f4:	fa21 f604 	lsr.w	r6, r1, r4
 80011f8:	eb42 0106 	adc.w	r1, r2, r6
 80011fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001200:	bf08      	it	eq
 8001202:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f1c4 040c 	rsb	r4, r4, #12
 800120c:	f1c4 0520 	rsb	r5, r4, #32
 8001210:	fa00 f304 	lsl.w	r3, r0, r4
 8001214:	fa20 f005 	lsr.w	r0, r0, r5
 8001218:	fa01 f204 	lsl.w	r2, r1, r4
 800121c:	ea40 0002 	orr.w	r0, r0, r2
 8001220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001228:	f141 0100 	adc.w	r1, r1, #0
 800122c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001230:	bf08      	it	eq
 8001232:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	f1c4 0520 	rsb	r5, r4, #32
 800123c:	fa00 f205 	lsl.w	r2, r0, r5
 8001240:	ea4e 0e02 	orr.w	lr, lr, r2
 8001244:	fa20 f304 	lsr.w	r3, r0, r4
 8001248:	fa01 f205 	lsl.w	r2, r1, r5
 800124c:	ea43 0302 	orr.w	r3, r3, r2
 8001250:	fa21 f004 	lsr.w	r0, r1, r4
 8001254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001258:	fa21 f204 	lsr.w	r2, r1, r4
 800125c:	ea20 0002 	bic.w	r0, r0, r2
 8001260:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001264:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001268:	bf08      	it	eq
 800126a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	f094 0f00 	teq	r4, #0
 8001274:	d10f      	bne.n	8001296 <__aeabi_dmul+0x1c2>
 8001276:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800127a:	0040      	lsls	r0, r0, #1
 800127c:	eb41 0101 	adc.w	r1, r1, r1
 8001280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001284:	bf08      	it	eq
 8001286:	3c01      	subeq	r4, #1
 8001288:	d0f7      	beq.n	800127a <__aeabi_dmul+0x1a6>
 800128a:	ea41 0106 	orr.w	r1, r1, r6
 800128e:	f095 0f00 	teq	r5, #0
 8001292:	bf18      	it	ne
 8001294:	4770      	bxne	lr
 8001296:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800129a:	0052      	lsls	r2, r2, #1
 800129c:	eb43 0303 	adc.w	r3, r3, r3
 80012a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80012a4:	bf08      	it	eq
 80012a6:	3d01      	subeq	r5, #1
 80012a8:	d0f7      	beq.n	800129a <__aeabi_dmul+0x1c6>
 80012aa:	ea43 0306 	orr.w	r3, r3, r6
 80012ae:	4770      	bx	lr
 80012b0:	ea94 0f0c 	teq	r4, ip
 80012b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80012b8:	bf18      	it	ne
 80012ba:	ea95 0f0c 	teqne	r5, ip
 80012be:	d00c      	beq.n	80012da <__aeabi_dmul+0x206>
 80012c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80012c4:	bf18      	it	ne
 80012c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80012ca:	d1d1      	bne.n	8001270 <__aeabi_dmul+0x19c>
 80012cc:	ea81 0103 	eor.w	r1, r1, r3
 80012d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80012d4:	f04f 0000 	mov.w	r0, #0
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
 80012da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80012de:	bf06      	itte	eq
 80012e0:	4610      	moveq	r0, r2
 80012e2:	4619      	moveq	r1, r3
 80012e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80012e8:	d019      	beq.n	800131e <__aeabi_dmul+0x24a>
 80012ea:	ea94 0f0c 	teq	r4, ip
 80012ee:	d102      	bne.n	80012f6 <__aeabi_dmul+0x222>
 80012f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80012f4:	d113      	bne.n	800131e <__aeabi_dmul+0x24a>
 80012f6:	ea95 0f0c 	teq	r5, ip
 80012fa:	d105      	bne.n	8001308 <__aeabi_dmul+0x234>
 80012fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001300:	bf1c      	itt	ne
 8001302:	4610      	movne	r0, r2
 8001304:	4619      	movne	r1, r3
 8001306:	d10a      	bne.n	800131e <__aeabi_dmul+0x24a>
 8001308:	ea81 0103 	eor.w	r1, r1, r3
 800130c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001310:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001314:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001318:	f04f 0000 	mov.w	r0, #0
 800131c:	bd70      	pop	{r4, r5, r6, pc}
 800131e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001322:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001326:	bd70      	pop	{r4, r5, r6, pc}

08001328 <__aeabi_ddiv>:
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800132e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001332:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001336:	bf1d      	ittte	ne
 8001338:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800133c:	ea94 0f0c 	teqne	r4, ip
 8001340:	ea95 0f0c 	teqne	r5, ip
 8001344:	f000 f8a7 	bleq	8001496 <__aeabi_ddiv+0x16e>
 8001348:	eba4 0405 	sub.w	r4, r4, r5
 800134c:	ea81 0e03 	eor.w	lr, r1, r3
 8001350:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001354:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001358:	f000 8088 	beq.w	800146c <__aeabi_ddiv+0x144>
 800135c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001360:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001364:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001368:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800136c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001370:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001374:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001378:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800137c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001380:	429d      	cmp	r5, r3
 8001382:	bf08      	it	eq
 8001384:	4296      	cmpeq	r6, r2
 8001386:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800138a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800138e:	d202      	bcs.n	8001396 <__aeabi_ddiv+0x6e>
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	ea4f 0232 	mov.w	r2, r2, rrx
 8001396:	1ab6      	subs	r6, r6, r2
 8001398:	eb65 0503 	sbc.w	r5, r5, r3
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	ea4f 0232 	mov.w	r2, r2, rrx
 80013a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80013a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80013aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80013ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013b2:	bf22      	ittt	cs
 80013b4:	1ab6      	subcs	r6, r6, r2
 80013b6:	4675      	movcs	r5, lr
 80013b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	ea4f 0232 	mov.w	r2, r2, rrx
 80013c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80013c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013ca:	bf22      	ittt	cs
 80013cc:	1ab6      	subcs	r6, r6, r2
 80013ce:	4675      	movcs	r5, lr
 80013d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80013da:	ebb6 0e02 	subs.w	lr, r6, r2
 80013de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013e2:	bf22      	ittt	cs
 80013e4:	1ab6      	subcs	r6, r6, r2
 80013e6:	4675      	movcs	r5, lr
 80013e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80013f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80013f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013fa:	bf22      	ittt	cs
 80013fc:	1ab6      	subcs	r6, r6, r2
 80013fe:	4675      	movcs	r5, lr
 8001400:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001404:	ea55 0e06 	orrs.w	lr, r5, r6
 8001408:	d018      	beq.n	800143c <__aeabi_ddiv+0x114>
 800140a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800140e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001412:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001416:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800141a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800141e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001422:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001426:	d1c0      	bne.n	80013aa <__aeabi_ddiv+0x82>
 8001428:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800142c:	d10b      	bne.n	8001446 <__aeabi_ddiv+0x11e>
 800142e:	ea41 0100 	orr.w	r1, r1, r0
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800143a:	e7b6      	b.n	80013aa <__aeabi_ddiv+0x82>
 800143c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001440:	bf04      	itt	eq
 8001442:	4301      	orreq	r1, r0
 8001444:	2000      	moveq	r0, #0
 8001446:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800144a:	bf88      	it	hi
 800144c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001450:	f63f aeaf 	bhi.w	80011b2 <__aeabi_dmul+0xde>
 8001454:	ebb5 0c03 	subs.w	ip, r5, r3
 8001458:	bf04      	itt	eq
 800145a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800145e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001462:	f150 0000 	adcs.w	r0, r0, #0
 8001466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800146a:	bd70      	pop	{r4, r5, r6, pc}
 800146c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001470:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001474:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001478:	bfc2      	ittt	gt
 800147a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800147e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001482:	bd70      	popgt	{r4, r5, r6, pc}
 8001484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001488:	f04f 0e00 	mov.w	lr, #0
 800148c:	3c01      	subs	r4, #1
 800148e:	e690      	b.n	80011b2 <__aeabi_dmul+0xde>
 8001490:	ea45 0e06 	orr.w	lr, r5, r6
 8001494:	e68d      	b.n	80011b2 <__aeabi_dmul+0xde>
 8001496:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800149a:	ea94 0f0c 	teq	r4, ip
 800149e:	bf08      	it	eq
 80014a0:	ea95 0f0c 	teqeq	r5, ip
 80014a4:	f43f af3b 	beq.w	800131e <__aeabi_dmul+0x24a>
 80014a8:	ea94 0f0c 	teq	r4, ip
 80014ac:	d10a      	bne.n	80014c4 <__aeabi_ddiv+0x19c>
 80014ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80014b2:	f47f af34 	bne.w	800131e <__aeabi_dmul+0x24a>
 80014b6:	ea95 0f0c 	teq	r5, ip
 80014ba:	f47f af25 	bne.w	8001308 <__aeabi_dmul+0x234>
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	e72c      	b.n	800131e <__aeabi_dmul+0x24a>
 80014c4:	ea95 0f0c 	teq	r5, ip
 80014c8:	d106      	bne.n	80014d8 <__aeabi_ddiv+0x1b0>
 80014ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80014ce:	f43f aefd 	beq.w	80012cc <__aeabi_dmul+0x1f8>
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	e722      	b.n	800131e <__aeabi_dmul+0x24a>
 80014d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80014dc:	bf18      	it	ne
 80014de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80014e2:	f47f aec5 	bne.w	8001270 <__aeabi_dmul+0x19c>
 80014e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80014ea:	f47f af0d 	bne.w	8001308 <__aeabi_dmul+0x234>
 80014ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80014f2:	f47f aeeb 	bne.w	80012cc <__aeabi_dmul+0x1f8>
 80014f6:	e712      	b.n	800131e <__aeabi_dmul+0x24a>

080014f8 <__aeabi_d2uiz>:
 80014f8:	004a      	lsls	r2, r1, #1
 80014fa:	d211      	bcs.n	8001520 <__aeabi_d2uiz+0x28>
 80014fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001500:	d211      	bcs.n	8001526 <__aeabi_d2uiz+0x2e>
 8001502:	d50d      	bpl.n	8001520 <__aeabi_d2uiz+0x28>
 8001504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800150c:	d40e      	bmi.n	800152c <__aeabi_d2uiz+0x34>
 800150e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800151a:	fa23 f002 	lsr.w	r0, r3, r2
 800151e:	4770      	bx	lr
 8001520:	f04f 0000 	mov.w	r0, #0
 8001524:	4770      	bx	lr
 8001526:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800152a:	d102      	bne.n	8001532 <__aeabi_d2uiz+0x3a>
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	4770      	bx	lr
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	4770      	bx	lr
